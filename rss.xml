<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Joselito</title>
    <link>https://joseli.to/</link>
    <atom:link href="/rss.xml" rel="self" type="application/rss+xml"/>
    
    <description>Aqui é o Joselito. Sou apaixonado pela web, organizador do GDG Recife e instrutor pela Tampa Works. Palestro sobre tecnologias web e gosto de F1, de aeroportos, de burritos e de piadas de baixa qualidade.</description>
    <pubDate>Sun, 02 Jul 2017 21:50:57 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>Blog novo no ar!</title>
      <link>https://joseli.to/blog-novo-no-ar/</link>
      <guid>https://joseli.to/blog-novo-no-ar/</guid>
      <pubDate>Sun, 02 Jul 2017 20:52:47 GMT</pubDate>
      <description>
      
        &lt;p&gt;Olá você! Seja bem-vindo ao último release deste humilde blog. Como de costume, não está realmente pronto, mas quando é que algo está pro
      
      </description>
      
      <content:encoded><![CDATA[<p>Olá você! Seja bem-vindo ao último release deste humilde blog. Como de costume, não está realmente pronto, mas quando é que algo está pronto, afinal?</p><p>Refiz por dois motivos: o primeiro é que de tempos em tempos eu gosto de renovar as coisas. O segundo, e principal, é que eu não estava satisfeito com o stack anterior que o blog<br>estava. Sentia que era um canhão pra matar formiga, e principalmente que eu não estava explorando ele o suficiente para utilizar as tecnologias que eu falava nele próprio. Isso de casa de ferreiro o espeto ser de pau não tá com nada.</p><h1 id="Deixa-eu-apresentar-a-casa-para-voce"><a href="#Deixa-eu-apresentar-a-casa-para-voce" class="headerlink" title="Deixa eu apresentar a casa para você:"></a>Deixa eu apresentar a casa para você:</h1><ul><li>O blog e o site não são mais separados: isso já vinha da última versão, mas agora está mais claro que tá tudo junto e misturado.</li><li>O site é um <strong>Progressive Web App</strong>: isso significa que se você por algum motivo quiser adicionar ele na sua homescreen, você pode e ainda vai ficar um ícone bonitinho no seu launcher.</li><li>Você pode receber <strong>Notificações</strong>: por ser um PWA, você receberá notificações de conteúdos meus toda vez que eles saírem. Claro, você tem que deixar: aperte o sininho no menu ou no rodapé de cada post e ative as notificações. Funciona tanto no celular quanto no desktop (se seu navegador deixar).</li><li>Ele funciona <strong>Offline</strong>: Esse site é um humilde local de compartilhamento de conteúdo. Nunca se sabe quando você vai precisar, certo? Então ele automaticamente salva o conteúdo que você visita para você poder ler depois. Você não precisa fazer nada, só de acessar o post já está valendo.</li><li>As páginas do site são <strong>AMPs</strong>: O projeto de Accelerated Mobile Pages é o que eu mais tenho curtido e falado nos últimos tempos, e tentei explorar ao máximo isso nesse bloguinho. Todas as paginas que você está acessando são AMPs de primeira classe, ou seja, não é que existe a versão “normal” e a versão “AMP” como você normalmente vê por aí. Há só a versão AMP. Isso só não é possivel como você está literalmente vendo uma diante dos seus olhos.</li></ul><p><strong>Ou seja, site inteiro foi feito pra ser uma hipócrita confusão organizada. Ele é um PWA que não é SPA e todas as páginas são AMPs, ou seja, só tem CSS inline, não tem JS externo, mas tem ServiceWorker.</strong> Se você entendeu alguma coisa deixa nos comentários.</p><h1 id="O-Stack"><a href="#O-Stack" class="headerlink" title="O Stack"></a>O Stack</h1><p>Tudo aqui foi feito com o Hexo para gerar o site estático e… só. Cito o VSCode, talvez? Não foi usado nenhum framework específico que foi lançado semana passada ou alguma configuração absurda do Babel. Todo JavaScript utilizado provém apenas do Projeto AMP, além de um ServiceWorker simplezinho.</p><p>Em posts futuros irei explicar em detalhes alguns tweaks feito no processo (eterno) da construção desse espaço virtual na Internet.</p><h1 id="Open-Source-mesmo"><a href="#Open-Source-mesmo" class="headerlink" title="Open Source mesmo"></a>Open Source mesmo</h1><p>O site é hospedado no GitHub Pages e o código fonte está disponível no GitHub. Isso permite duas coisas fantásticas:</p><ul><li><strong>Abrir Issues</strong>: você pode abrir uma issue no repositório do site pra informar algum problema no websítio, ou quer fazer uma sugestão de post/conteúdo</li><li><strong>Editar Posts</strong>: no rodapé de cada post além do link pra ativar as notificações você tem um link direto para poder editar o post. Isso é bem útil pra mim, dado que não reviso meus textos e typos são frequentes, então você pode resolver pra mim e mandar um PR. Você também pode fazer um <em>fork + remix</em> do post no seu blog direto do GitHub. E mais, isso facilita a vida até de quem copia integralmente meus textos sem autorização: você vai conseguir copiar agora diretamente do markdown fonte!</li></ul><h1 id="Inicio"><a href="#Inicio" class="headerlink" title="Início"></a>Início</h1><p>A conclusão é o começo. Este sítio demorou um bom tempo para ser feito e eu farei meu melhor para que seja bem utilizado, principalmente por você aí que está lendo esse texto. Assine as notificações e volte aqui mais vezes, que sempre vai ter coisa legal (quase semp- ok, raramente, mas vai ter).</p>]]></content:encoded>
      
      <comments>https://joseli.to/blog-novo-no-ar/#disqus_thread</comments>
    </item>
    
    <item>
      <title>ngrok: resolvendo os problemas de SSL e compartilhamento do localhost</title>
      <link>https://joseli.to/ngrok-resolvendo-os-problemas-de-ssl-e-compartilhamento-do-localhost/</link>
      <guid>https://joseli.to/ngrok-resolvendo-os-problemas-de-ssl-e-compartilhamento-do-localhost/</guid>
      <pubDate>Tue, 18 Apr 2017 13:00:40 GMT</pubDate>
      <description>
      
        &lt;p&gt;Tem uns programas que a gente procurou a vida toda e não sabia que precisava.&lt;/p&gt;&lt;p&gt;Quando estamos desenvolvendo pra web, uma das primeir
      
      </description>
      
      <content:encoded><![CDATA[<p>Tem uns programas que a gente procurou a vida toda e não sabia que precisava.</p><p>Quando estamos desenvolvendo pra web, uma das primeiras coisas que temos que fazer é levantar um servidor local na nossa máquina para conseguir executar devidamente nossos projetos. Hoje em dia levantar um servidor é relativamente simples, existem diversas ferramentas pra isso: você pode abrir um server em uma linha de Python ou usando praticamente qualquer CLI de desenvolvimento que exista por aí. Mas como estamos em 2017 e a web evolui a cada dia &#8211; mais rápido do que precisa, por sinal &#8211; ainda existe uma coisinha um pouco complicada de testar em localhost: <strong>o HTTPS</strong>.</p><p>HTTPS é tema recorrente aqui no blog e não vou me extender (de novo) as suas vantagens, vamos falar mais sobre requisitos: <strong>ServiceWorkers</strong>, por exemplo,<strong> </strong>precisam de um SSL pra funcionar devidamente. Eles até funcionam sem um certificado em localhost, mas como os SW estao diretamente ligados ao certificado e ao domínio, quando você precisa testar em vários projetos, isso se torna um problema sério de organização. Quem aí nunca sofreu com um cache absurdo que só faltou você desinstalar o browser pra resolver?</p><p>Algumas APIs também exigem o uso de HTTPS pra receber uma requisição, inclusive em localhost. Só pra citar um exemplo, a <strong>API da Uber</strong> é assim. Dá até pra fazer umas gambiarras com serviços como o <a href="https://crossorigin.me/" target="_blank" rel="external">crossorigin.me</a>, mas você deve concordar comigo que não é das coisas mais sensatas a se fazer, certo? Principalmente em produção.</p><p>Sem falar na hora de demonstrar as coisas pra o famoso cliente. Dar <strong>deploy</strong> pra toda vez que tiver uma pequena modificação, pra um local que no fim das contas ainda não vai ser o servidor final&#8230; dá preguiça só de pensar.</p><p>Por fim, emular um certificado SSL não é das tarefas mais fáceis, nem das mais seguras. Então não vamos inventar ainda mais problemas pra nós mesmos resolvermos.</p><p>O <strong>ngrok</strong> resolve todos esses problemas. Com uma linha de comando, ele abre um túnel do nosso localhost para a web, ofercendo:</p><ul><li><strong>Subdomínio:</strong> ao abrir o túnel, o ngrok vai gerar um subdomínio <em><strong><a href="https://algumacoisa.ngrok.io" target="_blank" rel="external">https://algumacoisa.ngrok.io</a></strong></em>, acessível por qualquer pessoa na internet, inclusive o <em>cliente</em>. Além disso, com um HTTPS você pode fazer requests seguras com tranquilidade, além de ter um SW podendo ser testado devidamente com um escopo de domínio específico.</li><li><strong>Proteção por senha:</strong> se você quiser, é possível configurar uma senha de acesso para cada subdomínio</li><li><strong>Testes em outros dispositivos:</strong> O ngrok facilita muito a vida de testar em outros dispositivos, como celulares, tablets e outros computadores. Basta acessar a URL, sem ter que abrir porta de modem, conectar todo mundo na mesma rede&#8230;</li><li><strong>Testes em VM:</strong> Mesmo em 2017, se você tem Linux ou Mac, o único jeito de testar no Microsoft Edge é tendo uma VM do Windows. Para situações como essas e tantas outras parecidas, você não precisa mais ficar instalando driver desconhecido de rede e dar foward de porta da sua maquina pra VM, é só acessar a URL gerada e sucesso.</li><li><strong>Debug de Requests:</strong> como se não bastasse, o ngrok te oferece um serviço de debug de requisição, do lado do servidor. Você pode ver todas as requisições que foram feitas ao localhost com detalhes, além de poder fazer um &#8220;<strong>replay&#8221;</strong> das mesmas ao toque de um botão. Ou seja: se não funcionava algo e você deu aquela mudada no código, você não precisa emular todo o fluxo de novo pra conseguir fazer um request, basta ir no painel e dar um ~replay</li></ul><p>Aí você me pergunta: quanto é que eu tenho que pagar por um serviço maravilhoso como esse? Nada. O ngrok é completamente open source e a única coisa que você tem que fazer é <a href="https://ngrok.com/" target="_blank" rel="external">baixar o executavel deles no site oficial</a> e rodar.</p><p>Vamos pensar num caso de uso real: digamos que você está trabalhando num aplicativo Ionic. Usando o Ionic-CLI, é possível levantar um servidor local usando o comando <code>ionic serve</code>. Isso vai abrir um servidor local na <strong>porta 8080</strong>, porta padrão utilizada pelo Ionic, deixando seu site acessível em <strong><a href="http://localhost:8080" target="_blank" rel="external">http://localhost:8080</a></strong>. Para usar o ngrok, basta abrir outra aba do seu Terminal, ir onde está o executável que você baixou e rodar o seguinte comando:</p><pre>$ ngrock 8080</pre><p>Pronto. É tão simples que chega a dar certo ódio. Você não tem que dizer pro ngrok qual pasta, qual projeto, o que é, nada: só avise pra ele qual porta você quer que o túnel seja aberto, e ele faz o resto. Enquanto aquela instância do terminal com o ngrok estiver rodando, aquela URL é acessível por qualquer um que souber o endereço.</p><p>O ngrok ainda conta com uns serviços pro como usar ele num VPS, domínios customizados, entre outras coisas, saiba mais visitando o site oficial: <strong><a href="https://ngrok.com/" target="_blank" rel="external">http://ngrok.com</a>.</strong></p><p>Agora com um <em>workflow</em> otimizado você vai poder ter mais tempo para chorar no banheiro enquanto se lembra dos boletos atrasados! Compartilhe a dica se você gostou, com certeza você conhece um pessoal que vai curtir também! 🚀</p>]]></content:encoded>
      
      <comments>https://joseli.to/ngrok-resolvendo-os-problemas-de-ssl-e-compartilhamento-do-localhost/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Como hospedar Progressive Web Apps no GitHub Pages</title>
      <link>https://joseli.to/como-hospedar-progressive-web-apps-no-github-pages/</link>
      <guid>https://joseli.to/como-hospedar-progressive-web-apps-no-github-pages/</guid>
      <pubDate>Thu, 23 Mar 2017 06:44:44 GMT</pubDate>
      <description>
      
        &lt;p&gt;Eu vivo falando da rede social de banco de dados em tempo real chamada &lt;strong&gt;Firebase&lt;/strong&gt; neste blogue digital. O Firebase ja é co
      
      </description>
      
      <content:encoded><![CDATA[<p>Eu vivo falando da rede social de banco de dados em tempo real chamada <strong>Firebase</strong> neste blogue digital. O Firebase ja é conhecido pela suas funcionalidades de Hosting, e basta um <code>firebase deploy</code><strong> </strong>para por um projeto no ar. Porém, como eu sou uma pessoa chata e desagradável, eu não gosto muito de usar o Firebase Hosting quando eu não estou usando nada <strong>além do própiro Firebase Hosting</strong>.</p><p>Explico: quando estamos usando mesmo o Firebase, aí tudo bem, estamos tudo em casa, tem o Database, tem o Hosting, tem algum serviço de autenticação&#8230; se justifica deixar tudo lá. Mas quando eu não tô usando outra coisa sem ser o Hosting, aparecem certas coisas que me incomodam: ter que criar um projeto novo no Firebase (que são limitados, caso não saiba), ter que inicializar o repositório com as configurações, usar o Firebase-CLI além de &#8211; obviamente &#8211; o próprio Git, e configurar o domínio e SSL não é difícil; mas é chato, demorado e manual (ao menos pros meus padrões).</p><p>Quando essa situação acontece, eu prefiro usar o <strong>GitHub Pages</strong> para por minhas páginas estáticas no ar. Eu já ia estar usando o Git de todo jeito, agora eu só tenho que dar push na branch certa e ele vai estar no ar. Nesses dias rolou algo interessante, um problema que eu nunca tinha enfrentado antes. Quando a gente desenvolve um Progressive Web App, é normal ele ter ao menos um tipo de autenticaçãozinha que seja. Então, eu sempre hospedava já no Firebase.</p><p>O Firebase Hosting tem um tipo de configuração especial para <strong>Single Page Apps</strong>: como é sabido, single page apps tem só o <code>index.html</code> e todo o conteúdo é adicionado e removido do DOM, e mudamos os valores e URL via JavaScript. No Firebase podemos configurar para que todos os requests válidos sejam redirecionados para o <code>index</code>, e assim é garantido que o usuário acessará o conteúdo devido, mesmo fazendo um acesso direto a uma página específica sem ser a própria home. É só por isso aqui no seu <code>firebase.json</code>:</p><pre class="prettyprint lang-json" data-start-line="1" data-visibility="visible" data-highlight="" data-caption="">"rewrites": [ {
  "source": "**",
  "destination": "/index.html"
} ]</pre><p>Ou seja, quando acessamos algum SPA hospedado no Firebase por: <code>https://meu.pwa/pagina</code>, o Firebase vai redirecionar o request para <code>index.html</code> e &#8211; se você fez tudo certo &#8211; vai receber de parâmetro &#8220;pagina&#8221; e você redireciona o usuário pro conteúdo devido.</p><p>Mas no GitHub Pages, se eu tentar acessar <code>https://meu.pwa/pagina</code>, o que acontece? Isso mesmo:</p><p><img src="https://joselito.space/files/2017/03/1490246451-768x390.png" alt="Print Screen da página de 404 do GitHub"></p><p>O famoso erro 404. O GitHub quando você tenta acessar <code>https://meu.pwa/pagina</code> ele tenta retornar <code>https://meu.pwa/pagina/index.html</code>. Como essa página não existe, ele retorna a página de erro 404. Se você parar pra pensar, realmente o servidor está coberto de razão.</p><p>Eu podia nesse momento engolir o orgulho e voltar chorando pr&#8217;os braços do Firebase. Mas eu sou Brasileiro e não desisto nunca. Algum jeito tem que ter, não é possível. E como em 99,9% dos casos, tem solução pra tudo.</p><p>Achei o repositório do ilutre desconhecido <a href="https://github.com/rafrex/" target="_blank" rel="external">@rafrex</a>. Eu podia terminar <a href="https://github.com/rafrex/spa-github-pages" target="_blank" rel="external">o post aqui linkando o repositório</a>, mas lá tem tanto arquivo, tanto texto, tanta coisa ~desnecesária (apesar de entender porquê eles estão lá) que vou pular a abertura da série pra você e explicar o que tem que ser feito.</p><p>No Firebase, ele redireciona todos os requests pra <code>index.html</code>. No GItHub não. Mas se você parar pra pensar, dado que é um SPA. Só existem duas possibilidades de acesso direto a arquivos:</p><p>&#8211; O próprio <code>index.html</code></p><p>&#8211; A página de erro 404</p><p>Aqui que a mágica acontece. Tecnicamente falando, o GitHub faz a mesma coisa que o Firebase, só que ao invés do <code>index.html</code> ele sempre redireciona para <code>404.html</code>. Se a gente der um jeito de redirecionar o <code>404</code> para o <code>index</code> e passar os parâmetros, estamos feitos, tudo funciona. Então, a gente tem que fazer duas coisas. Primeiro, escrever isso aqui no código da nossa <strong>404.html</strong>:</p><pre class="prettyprint lang-html" data-start-line="1" data-visibility="visible" data-highlight="" data-caption="">&lt;html&gt;
  &lt;head&gt;
    &lt;meta charset="utf-8"&gt;
    &lt;title&gt;&lt;/title&gt;
    &lt;script type="text/javascript"&gt;
      // Copyright (c) 2016 Rafael Pedicini, licensed under the MIT License
      var pathPrefix = false;
      var l = window.location;
      l.replace(
        l.protocol + '//' + l.hostname + (l.port ? ':' + l.port : '') +
        l.pathname.split('/').slice(0, 2 * pathPrefix).join('/') + '/?p=/' +
        l.pathname.slice(1).split('/').slice(pathPrefix).join('/').replace(/&amp;/g, '~and~') +
        (l.search ? '&amp;q=' + l.search.slice(1).replace(/&amp;/g, '~and~') : '') +
        l.hash
      );
    &lt;/script&gt;
  &lt;/head&gt;
  &lt;body&gt;
  &lt;/body&gt;
&lt;/html&gt;</pre><p>O código é simples mas genial. Se o usuário acessa <code>https://meu.pwa/pagina</code>, o GitHub renderiza o template de <code>404.html</code>. No próprio template, ele pega a própria url e transforma <code>https://meu.pwa/pagina</code> em <code>https://meu.pwa/?p=pagina</code>. Aí agora a história é outra. Estamos indo para <code>index.html</code>, que é uma página válida. Então lá, precisamos adicionar o seguinte código:</p><pre class="prettyprint lang-javascript" data-start-line="1" data-visibility="visible" data-highlight="" data-caption="">&lt;script type="text/javascript"&gt;
 // Copyright (c) 2016 Rafael Pedicini, licensed under the MIT License
    (function(l) {
        if (l.search) {
          var q = {};
          l.search.slice(1).split('&amp;').forEach(function(v) {
            var a = v.split('=');
            q[a[0]] = a.slice(1).join('=').replace(/~and~/g, '&amp;');
          });
          if (q.p !== undefined) {
            window.history.replaceState(null, null,
              l.pathname.slice(0, -1) + (q.p || '') +
              (q.q ? ('?' + q.q) : '') +
              l.hash
            );
          }
        }
    }(window.location))
&lt;/script&gt;</pre><p>Aqui termina o truque. Como esse problema de URLS só acontece quando estamos trabalhando diretamente com a <strong>History API</strong>, o nosso próprio App vai usar a <strong>própria</strong> History API, independente do Framework que você estiver usando. Aí é garantido que a página vai ser redirecionada para o conteúdo esperado.</p><p>Aí é só correr pro abraço. Se você quisser ver um exemplo com Polymer funcionando, pode acessar o website web online do <a href="https://io.gdgrecife.com/" target="_blank" rel="external">I/O Extended Pernambuco</a>. Foi justamente por culpa dele que eu descobri como que isso acontece.</p><p>Nada como ser cabeça dura ás vezes, né não?</p>]]></content:encoded>
      
      <comments>https://joseli.to/como-hospedar-progressive-web-apps-no-github-pages/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Você talvez não saiba, mas o Atlético Paranaense e o Coritiba entraram para a história</title>
      <link>https://joseli.to/voce-talvez-nao-saiba-mas-o-atletico-paranaense-e-o-coritiba-entraram-para-a-historia/</link>
      <guid>https://joseli.to/voce-talvez-nao-saiba-mas-o-atletico-paranaense-e-o-coritiba-entraram-para-a-historia/</guid>
      <pubDate>Tue, 21 Feb 2017 02:47:28 GMT</pubDate>
      <description>
      
        &lt;p&gt;Pode parecer estranho eu escrever sobre futebol. Mas acho que o assunto é mais que futebol, é sobre &lt;strong&gt;mudança&lt;/strong&gt;. E uma daque
      
      </description>
      
      <content:encoded><![CDATA[<p>Pode parecer estranho eu escrever sobre futebol. Mas acho que o assunto é mais que futebol, é sobre <strong>mudança</strong>. E uma daquelas que a gente talvez sinta que presenciou História, sabe? Mesmo que seja numa coisa boba, como por exemplo, futebol.</p><p>Ouço sempre que futebol não é só um esporte. De vários amigos, de conhecidos, e certamente a essa altura alguém já usou isso como marketing. Basta lembrar de toda a comoção ocorrida com a tragédia que aconteceu com a Chapecoense. E talvez, no início da noite de ontem, pode ter acontecido algo que venha ser mais um argumento para sustentar a fama do esporte que não é só esporte.</p><p>Mas antes, vamos a alguns fatos: dado que estamos em 2017, você já deve ter notado que as Organizações Globo são donas de todas as transmissões esportivas no Brasil. Se você acompanha futebol, certamente acha que o que acabei de falar é chover no molhado. Desde que futebol é futebol no Brasil, a Globo manda e desmanda, desde escolher os horários das partidas (como ocorre nas quartas-feiras, no ridículo horário das 21h30) até deixar de passar jogos <a href="http://mauriciostycer.blogosfera.uol.com.br/2016/08/09/midia-estrangeira-nao-entende-por-que-novelas-tem-prioridade-sobre-os-jogos/" target="_blank" rel="external">por motivos de novela</a>. A Band, coitada, sempre faz o que pode, mas nanica como é, se limita a ser parceira da Globo. Isso, claro, quando é possível, já que deixou de exibir o Brasileirão por falta de patrocinadores, por motivos óbvios, já que eles podem patrocinar na Globo.<span id="more-289"></span></p><p>Por décadas, salva uma ou outra peitada na platinada &#8211; afinal, quem não lembra do <a href="https://www.youtube.com/watch?v=boz418E1a80" target="_blank" rel="external">Vasco sendo campeão com o logo do SBT</a> no final do campeonato de 2000 (o que deixou eles queimados até hoje) ou o breve período que o <a href="https://www.youtube.com/watch?v=y4E2wVqxuSE" target="_blank" rel="external">SBT tentou transmitir futebol</a>? -, a alternativa era única: aceitar os termos dela. Afinal, o que se pode fazer?</p><p>Alguns já buscaram plataformas alternativas, como o Santos e alguns outros clubes (como meu Santa Cruz), que fecharam com o <strong>Esporte Interativo</strong>. Ou ao menos tentaram. O que o Atlético e o Coritiba notaram-daquelas coisas que estão na frente de todo mundo, e por isso ninguém vê- é que eles não precisavam ir pra outra plataforma.</p><p><strong>Eles são a plataforma.</strong></p><p>Oras: cada um deles é um time de futebol. Com estádio, com elenco, com <strong>torcedores</strong>. A fatia de mérito que a Globo possa ter na valorização de cada time é virtualmente irrelevante. Somado a isso, temos a vantagem de viver no futuro: qualquer pessoa com um smartphone e acesso a internet consegue entrar ao vivo pra todo o planeta dando 4 toques na tela (eu contei). Por quê não fazer o mesmo?</p><p>Se você já ouviu que futebol não é só um esporte, provavelmente você deve ter ouvido outra coisa também: que o YouTube vai matar a TV. Não vai, mas isso é tema pra outro post. Porém há algo que vai além do &#8220;se&#8221;: o alcance das duas atualmente é equivalente quando você tem um público alvo direcionado. Com a vantagem absurda de ter uma coisa que a TV jamais terá: audiência precisa em tempo real.</p><p>O Atlético Paranaense e o Coritiba, que não aceitaram ambos os termos da Globo, resolveram transmitir via redes sociais: cada clube ia transmitir o mesmo jogo, simultaneamente, em suas páginas no Facebook e canais no YouTube:</p><iframe style="border:0" src="//www.youtube.com/embed/o9b3jrwNK9E" width="100%" height="365" allowfullscreen></iframe><p>Se a história terminasse aí, já ia ser uma história ímpar: os dois maiores rivais de um campeonato se juntaram contra um inimigo comum. Seria o primeiro jogo da história do futebol nacional a ser transmitido exclusivamente por redes sociais. E eles fizeram tudo como manda o figurino, toda a produção de câmeras, narrador, comentarista, repórter em campo e tudo mais.</p><p>Mas a entrega saiu muito melhor que a encomenda.</p><p>Como você certamente não viu a live inteira para continuar a ler o post, tenho uma novidade pra você: <strong>não teve jogo</strong>. Isso, não teve jogo.</p><p>Era claro e evidente que a Globo não ia assistir (rs) calada a toda a situação. Que ela ia revidar de alguma forma todo mundo sabia, o que só aumenta a grandiosidade do ato dos clubes. Provavelmente, ao notar que se calar não bastaria, já que todo mundo estava aplaudindo a causa &#8211; até YouTubers gamers eu vi comentando sobre &#8211; ela resolveu jogar pesado e usar todo o poder que sua oligarquia permite.</p><p>A Globo deu um <em>all in</em> com um daqueles blefes maravilhosos pra cima dos clubes: se esperou, literalmente, até o último segundo antes do início da partida para o negócio começar a estourar. Os times chegaram a se posicionar, a bola foi ao centro de campo. Mas nada de chute inicial. Momentos depois, a informação surge: a Federação Paranaense de futebol tinha proibido do jogo se iniciar.</p><p>A pancada foi bem dada: se no Brasil já não temos campeonatos &#8220;alternativos&#8221; e independentes pois todos estão ligados com Federações, com árbitros é pior ainda. E como o árbitro era da Federação, ele pode usar uma das melhores desculpas que pode ser utilizada por um ser humano vivo: &#8220;Só estou cumprindo ordens&#8221;.</p><p>Jogo &#8220;paralisado&#8221; (tecnicamente ele não começou) começou o bafafá interno. Não estava lá, <a href="http://www.sensacionalista.com.br/2016/09/15/82000/" target="_blank" rel="external">não posso provar, mas tenho convicção</a> que um dos dirigentes falou com essas palavras &#8220;E daí que vocês tem contrato com a Globo, caguei.&#8221;. Caiu a primeira barreira, de fato não havia motivo. Depois, tentou-se rebater que eles não poderiam ter vendido os direitos pra outrem que não a Globo, e outra vez o argumento foi rebatido: eles não venderam nada a ninguém. <strong>Eles eram a plataforma. Eles estavam transmitindo por contra própria</strong>.</p><p>Após muito tentar se arranjar motivo pra interromper a transmissão (em momentos da live é possível ver a galera lendo o regulamento, procurando por QUALQUER COISA que impedisse, com mais vontade que um guarda procurando problema no seu carro em noite de blitz de lei seca), usaram algo que pegou eles desprevenidos: argumentaram que os repórteres em campo (contratados pelos clubes) não podiam estar ali sem estarem credenciados.</p><p>Se por um lado foi totalmente pelo espaço o plano de dizer &#8220;há algo de errado com o jogo&#8221;, com isso o discurso foi claramente &#8220;nós não queremos que o jogo seja transmitido online&#8221;: não tinha problema da partida continuar, contanto que os repórteres da transmissão se retirassem. Conveniente, não?</p><p>Por um lado eu entendo o &#8220;desleixo&#8221;, afinal, porra &#8220;a transmissão é minha, o estádio é meu, eu que mando nessa porra, não precisa credenciar&#8221;. Mas regras tão ai pra serem quebradas e lhe foderem quando você não faz isso direito. E como uma boa guerra, temos que analisar bem a porrada que veio do outro lado, que foi digna de aplausos: os clubes estavam ali, com estádio cheio, com tudo preparado e, afinal, com uma agenda a cumprir (futebol é trabalho pelo que conferi da última vez). Então eles tinham que escolher entre dois ruins: ou eles deixavam pra lá, desligavam a transmissão e o jogo acontecia (o que seria o mais lógico, infelizmente) ou acreditar na ideia, e assumir a transmissão, aceitar que vai ter que pagar reembolso pra todo mundo, acreditar que seus torcedores entenderiam, e mais, acreditar que os dois times iriam querer isso em comum acordo, dado que se só um desistisse, o outro ganhava por W.O., além de pensar em toda uma logística para um próximo jogo, somada ao prejuízo inteiro que o jogo de hoje daria. Uma sinuca de bico das boas.</p><p>E eles escolheram o que fez o jogo de ontem ao invés de virar apenas uma nota de rodapé num futuro próximo, dado que todo mundo iria fazer ou ninguém iria fazer, virou algo muito mais que isso: como o notável espírito esportivo estava no ambiente, os dois times em comum acordo decidiram em não jogar se não tivesse a sua transmissão online. E bateram o pé até o final, ambos desistindo da partida. Nesse meio tempo, aconteceram duas coisas incríveis na transmissão:</p><ul><li>Algum gênio operando uma das câmeras do jogo notou que as pessoas do estádio estavam utilizando a própria transmissão para entender o que estava acontecendo (afinal, o jogo já atrasara por vários minutos) e filmou toda essa galera. Isso é bem sutil, mas é uma maneira fantástica de se provar como plataforma.</li><li>A união dos times foi de maneira tal que após a decisão da desistência, todos os jogadores voltaram a campo, intercalados, para agradecer a presença da torcida. E nessa subida, os dois dirigentes, de cada clube (os maiores rivais do estado, lembre-se!) cumprimentaram cada jogador. Um verdadeiro show pra quem aprecia e entende que a rivalidade do esporte tem que estar apenas dentro de campo na hora da competição.</li></ul><p>E acreditando na ideia, o tiro saiu pela culatra: todo o apoio aos clubes foi dado pela torcida, ações de <a href="http://espn.uol.com.br/noticia/672790_danos-morais-e-materiais-torcedores-processam-federacao-paranaense-por-atletiba-que-foi-cancelado" target="_blank" rel="external">danos morais serão movidas contra o Federação</a> e o hype para o próximo (na verdade) primeiro jogo transmitido online dos dois não poderia estar maior.</p><p>Como o <a href="https://blogdojuca.uol.com.br/2017/02/atletiba-historico/" target="_blank" rel="external">Juca Kfouri bem falou</a> (e olha, que pra eu concordar com ele não é fácil):</p><p><em>É direito da TV achar que o jogo vale menos do que os clubes querem?</em></p><p><em>É.</em></p><p><em>E é direito dos clubes fazerem o que bem entenderem com os jogos que não venderam para a TV?</em></p><p><em>Sem dúvida, também é.</em></p><p>E o jogo de ontem mostrou que ainda há razões pra acreditar. Pra lembrar que quem manda no esporte é o povo, e principalmente, que o espírito esportivo de união consegue superar qualquer conflito.</p><p>E que essa mudança seja só o começo.</p>]]></content:encoded>
      
      <comments>https://joseli.to/voce-talvez-nao-saiba-mas-o-atletico-paranaense-e-o-coritiba-entraram-para-a-historia/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Servidor (ridiculamente simples) em Node para arquivos estáticos</title>
      <link>https://joseli.to/servidor-ridiculamente-simples-em-node-para-arquivos-estaticos/</link>
      <guid>https://joseli.to/servidor-ridiculamente-simples-em-node-para-arquivos-estaticos/</guid>
      <pubDate>Tue, 03 Jan 2017 23:55:47 GMT</pubDate>
      <description>
      
        &lt;p&gt;Hoje em dia iniciar um projeto em JS é quase um casamento seu com suas ferramentas, no qual você tem que passar alguns bons minutos (ou h
      
      </description>
      
      <content:encoded><![CDATA[<p>Hoje em dia iniciar um projeto em JS é quase um casamento seu com suas ferramentas, no qual você tem que passar alguns bons minutos (ou horas) pra configurar tudo e deixar tudo perfeitinho.</p><p>A vantagem disso é que _teoricamente _você só vai precisar fazer esse trabalho uma vez; porém nem sempre a gente quer, ou <em>precisa</em>, ter esse trabalho. Um dos melhores amigos de quem trabalha com conteúdo estático é o _SimpleHTTPServer _do Python, que nos permite levantar um servidor HTTP com uma facilidade absurda, além da sua grande vantagem de já estar pré-instalado virtualmente em qualquer máquina com um sistema UNIX.<span id="more-5"></span></p><p>Se você está trabalhando só com um punhado de arquivos estáticos, com o <em>SHS</em> em uma linha tava o _localhost _aberto no navegador. Porém o SHS não é a coisa — digamos — menos bugada do mundo, e também não tem tantas opções assim pra customizar as própriedades do servidor (ou até tenha, eu que não sou de Python que não sei mexer)</p><p>Pra manter tudo dentro de casa, existe o pacote <a href="https://www.npmjs.com/package/http-server" target="_blank" rel="external">http-server</a> disponível lá no npm, como de costume.</p><p>Tem a mesma praticidade do SHS, e apesar de não vir direto com o sistema, eu imagino que a essa altura do campeonato você tenha o npm instalado.</p><p>Além de menos bugado (apesar de ser em JS, né), ele oferece umas opções 100% show de bola e muito úteis, relacionadas com <strong>CORS</strong>, <strong>SSL</strong> e <strong>Proxies</strong>.</p><p>Mesmo que não seja de todo útil em projetos mais escaláveis, o [ictt-tweet-inline]http-server é uma daquelas ferramentas que vale a pena ter guardado pro &#8220;nunca se sabe&#8221;.[/ictt-tweet-inline]</p><p>Vai que né.</p>]]></content:encoded>
      
      <comments>https://joseli.to/servidor-ridiculamente-simples-em-node-para-arquivos-estaticos/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Saiu o Angular 4 beta 0. E tá tudo bem.</title>
      <link>https://joseli.to/saiu-o-angular-4-beta-0-e-ta-tudo-bem/</link>
      <guid>https://joseli.to/saiu-o-angular-4-beta-0-e-ta-tudo-bem/</guid>
      <pubDate>Sat, 17 Dec 2016 01:48:14 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;em&gt;Ou “Como Não Se Desesperar Com Um Versionamento Mal Feito”&lt;/em&gt;&lt;/p&gt;&lt;p&gt;O Angular atualmente é o Lula dos frameworks de JavaScript. E n
      
      </description>
      
      <content:encoded><![CDATA[<p><em>Ou “Como Não Se Desesperar Com Um Versionamento Mal Feito”</em></p><p>O Angular atualmente é o Lula dos frameworks de JavaScript. E nem é por questão ideológica, ou algo do gênero, mas repare, é por Angular 2 no título que é <em>clique &amp; polêmica</em>. Poderia aumentar o paralelo: o Angular já foi muito idolatrado, agora nem tanto. Tem gente que acha que morreu (ou que vai ser preso amanhã), e tem seguidores fervorosos até o dia de hoje.</p><p>O que política tem a ver com versionamento? <strong>Isso mesmo, nada.</strong><span id="more-6"></span></p><p>Eu costumo comentar ao falar de Angular 2 no <a href="http://ionicbootcamp.com" target="_blank" rel="external">Ionic Bootcamp</a> que o Angular 2 só tem o mesmo do Angular 1 porque foi o mesmo time que fez, e eles servem pra mesma coisa (ok, além do nome também ser ~forte). Mas, pra todos efeitos, são frameworks completamente distintos.</p><p>Pro mal ou pro bem o Angular 2 tá aí e veio pra ficar. E ontem <a href="https://github.com/angular/angular/blob/master/CHANGELOG.md" target="_blank" rel="external">saiu o primeiro beta</a> da nova versão do Angular, a 4. Sim, quatro. Do dois pra quatro.</p><figure><img src="https://cdn-images-1.medium.com/max/389/1*l3DXpKMHeCJW6_7vyUYodg.gif" alt=""></figure><p>Calma.</p><h4 id="O-que-aconteceu-com-a-versao-tres-e-a-boa-e-velha-ordem-dos-numeros-naturais"><a href="#O-que-aconteceu-com-a-versao-tres-e-a-boa-e-velha-ordem-dos-numeros-naturais" class="headerlink" title="O que aconteceu com a versão três e a boa e velha ordem dos números naturais?"></a>O que aconteceu com a versão três e a boa e velha ordem dos números naturais?</h4><p>Até o momento da publicação desse post, o número após o 2 realmente é o 3.</p><p>O Angular, bem como a maioria dos projetos ~sérios~ usa o versionamento <a href="http://semver.org/" target="_blank" rel="external">SemVer</a> (claro, isso se tornou verdade de fato a partir da 2.x), que de fato atribui um significado específico para cada número no release:</p><figure><img src="https://cdn-images-1.medium.com/max/640/1*UdZfbqkEjC6ITUDhDcvUJw.png" alt=""><figcaption>Tal qual a Bel Pesce, o SemVer tem vários Majors e Minors, mas não tem realmente um PhD no MIT</figcaption></figure><p>Como o time do Angular tá levando a<strong><em> sério mesmo</em></strong> esse papo do SemVer, qualquer <strong><em>Breaking Change</em></strong>, por menor que pareça, é relevante e justifica uma mudança de versão. É aquele papo de que não tem mentira grande nem pequena, é tudo mentira igual.</p><p>A mudança de agora é a alteração na versão do TypeScript utilizada. Atualmente, na versão 2.3.x o Angular utiliza a versão 1.8 do TypeScript. A mudança prevê a alteração para a 2.1 ou até, quem sabe, para a 2.2. Só o tempo dirá.</p><p>Isso explica o pulo de versão, mas não explica o 4. Mas o <em>@angular/router</em> explica. Todos os packages no npm do <em>@angular</em> estão alinhados com a versão 2.3.x, menos o <em>router</em>. Por algum motivo (e alguns esporros), o router está na versão 3.3.x. Pra deixar todo mundo alinhado no mesmo número de versão, e batendo com o que o SemVer manda (um major release tem que ser x.0.0), a nova versão precisa ser a 4.0.0.</p><h4 id="Isso-de-numeracao-ja-virou-loucura-faz-tempo"><a href="#Isso-de-numeracao-ja-virou-loucura-faz-tempo" class="headerlink" title="Isso de numeração já virou loucura faz tempo"></a>Isso de numeração já virou loucura faz tempo</h4><p>Versionamento é uma coisa estranha. Pra variar, quando envolve a Web, piora, já que a gente é todo apressadinho.</p><p>O iOS está no 10, Windows e macOS também no mesmo número, já o Android está no 7.</p><p>Mas o Chrome já tá no 55. O Firefox no 50. E o que falar do React, que tá na 15.4.0? Acho que só o Ember se salva, pra variar.</p><p>Então, a grande lição sobre as versões são: elas na real mesmo não importam tanto assim. Só quando aparece bug.</p><p>Então relaxa: a mudança do 2 pro 4 não será essa porrada que foi do 1 pro 2. É uma mudança contínua e progressiva. Update daquele clássico mesmo, de raiz. Retrocompatibilidade garantida e só uma mudança ou outra ali na estrutura, pra implementar as coisas novas que chegaram.</p><h4 id="E-so-“Angular”"><a href="#E-so-“Angular”" class="headerlink" title="É só “Angular”"></a>É só “Angular”</h4><p>Como o time recomenda, o nome a ser utilizado é só Angular. Não Angular 2, não Angular 4, não Angular N. Só, Angular.</p><p>É difícil se acostumar a um primeiro momento, principalmente dada a relevância que o Angular 1 ainda tem (o que é uma pena na minha humilde opinião). Quem sabe com a chegada do 4, de chamar só de “Angular” fica mais natural.</p><p>A previsão é ter um Major Release a cada 6 meses. Então, se do contrário de todas as previsões o mundo não acabar, lá pro início de 2018, já estaremos na versão 6 na ponta da agulha.</p><p><em>Quantos frameworks será que morrem daqui pra 2018? </em><strong><em>Fica a dúvida.</em></strong></p>]]></content:encoded>
      
      <comments>https://joseli.to/saiu-o-angular-4-beta-0-e-ta-tudo-bem/#disqus_thread</comments>
    </item>
    
    <item>
      <title>As novidades do Firebase Summit</title>
      <link>https://joseli.to/as-novidades-do-firebase-summit/</link>
      <guid>https://joseli.to/as-novidades-do-firebase-summit/</guid>
      <pubDate>Tue, 08 Nov 2016 17:18:56 GMT</pubDate>
      <description>
      
        &lt;p&gt;Ontem aconteceu em Berlim o Firebase Dev Summit. Depois de seis meses do Google I/O ter rolado — e o I/O foi totalmente sobre o Firebase 
      
      </description>
      
      <content:encoded><![CDATA[<p>Ontem aconteceu em Berlim o Firebase Dev Summit. Depois de seis meses do Google I/O ter rolado — e o I/O foi totalmente sobre o Firebase — chegou a hora de mostrar os próximos passos da plataforma.</p><p>Como todo bom evento sobre produto, ele joga uns números impressionantes na sua cara: desde o lançamento da versão 3.0, no I/O, mais de <strong>750 mil</strong> projetos foram criados no Firebase, <em>Kakaroto</em>.</p><h4 id="Com-amor-para-os-Apps"><a href="#Com-amor-para-os-Apps" class="headerlink" title="Com amor, para os Apps"></a>Com amor, para os Apps</h4><p>O <strong>Firebase Crash Reporting</strong> saiu do beta e agora está totalmente integrado com o <strong>Firebase Analytics</strong>. A partir de agora, quando seu app der um crash, todas as tags e conteúdos armazenados via analytics serão enviados ao Firebase e estarão disponíveis no seu console para você analisar os dados e entender, em detalhes, o que o seu usuário estava fazendo e qual o motivo daquele crash ter acontecido.</p><p>Além disso, para Android, o <strong>Firebase Test Lab</strong> agora está disponível no tier <strong>gratuito </strong>do Firebase. Você pode usa-lo com 5 testes em devices físicos/dia e 10 testes em devices físicos/dia sem pagar absolutamente nada. O Test Lab permite executar e analisar testes feitos com o Espresso e o Robotium (entre outros) e ver os resultados direto no seu Console. Também foram disponibilizados modelos de smartphones Android mais atuais no painel.<span id="more-7"></span></p><p>Além disso, o <strong>Firebase Analytics</strong> agora oferece informações em tempo real (nada mais apropriado) da utilização do seu app, bem como exportar tudo isso para BigQuery (sim, em tempo real!). O Analytics também ficou mais esperto: ele consegue indentificar algumas nuances mais profundas agora: por exemplo, quando você usa um Dynamic Link dentro do Facebook, o Analytics consegue indentificar isso e organizar esses dados pra você. Você sabe agora o que seu usuário faz, de onde vem e — praticamente — para onde ele vai no seu app.</p><h4 id="Se-o-login-ja-era-facil-imagina-agora"><a href="#Se-o-login-ja-era-facil-imagina-agora" class="headerlink" title="Se o login já era fácil, imagina agora"></a>Se o login já era fácil, imagina agora</h4><p>O <strong>Firebase Auth</strong> tenta ser o sistema mais simples possível para autenticar os usuários. Ele permite login via OAuth com <strong>Google, Facebook</strong>, Twitter, Github, <strong>E-mail</strong> e — o melhor — <strong>anonimamente</strong>.</p><p>A API já era um amorzinho. Mas as pessoas lá acharam pouco: saiu a versão 1.0 do <a href="https://github.com/firebase/FirebaseUI" target="_blank" rel="external"><strong>Firebase-UI</strong></a>. Ele é um projetíneo que já entrega pra você o front-end pronto pra todas essas redes, totalmente conectado com a API do Firebase. Ele está disponível para <strong>Android, iOS e Web.</strong></p><p><em>Só falta daqui a pouco o Firebase vai fazer sozinho direto no Google Play, vai ser só subir o APK. Isso de programar é sem futuro.</em></p><figure><img src="https://cdn-images-1.medium.com/max/1024/1*TnLy_u9uWvQU7lZbIe6t_Q.jpeg" alt=""><figcaption><a href="https://twitter.com/tasomaniac/status/795616656940736512" target="_blank" rel="external">https://twitter.com/tasomaniac/status/795616656940736512</a></figcaption></figure><h4 id="SDKs-novos-e-atualizados"><a href="#SDKs-novos-e-atualizados" class="headerlink" title="SDKs novos e atualizados"></a>SDKs novos e atualizados</h4><p>Você que faz joguetes, saiu SDK nativo do Firebase pra Unity! Analytics, o Banco de Dados, Autenticação, Dynamic Links, Remote Config, Notificações. Tá tudo disponível. Surpreendentemente.</p><p>De tabela, você que curte escovar uns bits, também rolou update do SDK nativo para C++. Sim, tem um. Um novo mundo de possibilidades, não é mesmo? A principal novidade é o suporte a banco de dados em realtime. Sim. Em C++. Tenho até medo.</p><p>Não ligado diretamente ao Summit, mas aproveitando o incejo, o <a href="https://github.com/angular/angularfire2" target="_blank" rel="external"><strong>AngularFire</strong></a><strong> está quase na versão final.</strong> Não conta pra ninguém que eu te contei. Se você já está trabalhando com Angular 2, <strong>corre.</strong></p><p>Por fim, também saiu o update pra algo que você talvez não saiba que o Firebase tem, o <strong>Admin SDK</strong>. Com versões pra <strong>Node e Java</strong>, ele permite você estruturar uma área de Admin para sua aplicação, toda personalizada do seu jeitinho. O Console do Firebase é ótimo — mas pra quem é Dev. Se você quer que um humano entenda (e gerencie) nada como um Dashboard personalizado. <a href="https://firebase.google.com/docs/admin/setup" target="_blank" rel="external"><strong>Vai fazer o teu.</strong></a></p><h4 id="Comunidade"><a href="#Comunidade" class="headerlink" title="Comunidade"></a>Comunidade</h4><p>Um Summit é muito bom pra aproximar os desenvolvedores que aplicam um produto com os desenvolvedores que criam o produto. Mas não é todo mundo que pode ir direto pra Berlim trocar uma ideia ou participar dos codelabs.</p><p>Se você quiser se aprofundar mais no Firebase, no Summit foi lançado em parceria com a <strong>Udacity </strong>o <strong>“Firebase in a Weekend”</strong> para <a href="https://www.udacity.com/course/firebase-in-a-weekend-by-google-ios--ud0351?utm_campaign=Firebase_announcement_awareness_general_en_11-07-16&amp;utm_source=Firebase&amp;utm_medium=blog" target="_blank" rel="external">iOS</a> e <a href="https://www.udacity.com/course/firebase-in-a-weekend-by-google-android--ud0352?utm_campaign=Firebase_announcement_awareness_general_en_11-07-16&amp;utm_source=Firebase&amp;utm_medium=blog" target="_blank" rel="external">Android</a>. <strong>Sim, de graça também.</strong></p><p>Outro lugar top pra você interagir com os developers, entra no <a href="https://firebase-community.appspot.com/" target="_blank" rel="external"><strong>Slack</strong></a><strong> </strong>e segue o <a href="https://twitter.com/Firebase" target="_blank" rel="external"><strong>Twitter</strong></a><strong> </strong>do Firebase.</p><p>Além disso, visite o <a href="https://www.youtube.com/firebase" target="_blank" rel="external"><strong>Canal do YouTube</strong></a><strong> </strong>do Firebase. Lá estão a gravação de todas as palestras do Summit, mais especificamente nessa <a href="https://www.youtube.com/watch?v=2sCjSz_svdY&amp;list=PLl-K7zZEsYLmYSsW6ED2QvHxuI3UzT0WZ" target="_blank" rel="external">playlist aqui</a>.</p><p><strong><em>Conteúdo é o que não falta (:</em></strong></p>]]></content:encoded>
      
      <comments>https://joseli.to/as-novidades-do-firebase-summit/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Como é programar em JavaScript em 2016</title>
      <link>https://joseli.to/como-e-programar-em-javascript-em-2016/</link>
      <guid>https://joseli.to/como-e-programar-em-javascript-em-2016/</guid>
      <pubDate>Thu, 06 Oct 2016 01:48:57 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt;Esse artigo é uma tradução totalmente livre e adaptada de &lt;/em&gt;&lt;/strong&gt;&lt;a href=&quot;https://hackernoon.com/how-it-fe
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p><strong><em>Esse artigo é uma tradução totalmente livre e adaptada de </em></strong><a href="https://hackernoon.com/how-it-feels-to-learn-javascript-in-2016-d3a717dd577f#.cx19ga9vu" target="_blank" rel="external"><strong><em>“How it feels to learn Javascript in 2016”</em></strong></a><strong><em>, publicada na Hackernoon. Provavelmente nenhuma nova biblioteca foi criada enquanto esse artigo estava sendo escrito. Ou não.</em></strong></p></blockquote><p>Era uma terça-feira e chovia muito. Numa conversa entre dois amigos, um desenvolvedor frontend e um backend…</p><p>Man, seguinte, eu peguei um freela aí de um projetinho web pra dar uma ajuda nas finanças, sabe como é…</p><p><em>A crise tá foda, né?</em></p><p>Então… Mas como você sabe, faz um bom tempo que eu não mexo com web e ouvi muito sobre as mudanças que rolaram nos últimos tempos. Tô ligado que você manja muito do rolê de ser webdesigner, né?</p><p><em>O termo atual é “Engenheiro Front End” mas sim, é isso mesmo. Mudou bastante. Dá pra fazer tudo com JavaScript, acabei de voltar da BrazilJS e, cara, nunca me senti tão bem em conhecer o que há de mais novo na web. Dá pra fazer de players de música com aqueles visualizers foda e até controlar drones. A gente consegue fazer o que a gente quiser com JS, o céu é o limite.</em><span id="more-8"></span></p><p>Foda. Então, eu quero fazer uma página simples que vai mostrar as últimas atividades dos usuários, pra uma rede social aí. Tem uma API REST molezinha que basta fazer aquela chamada do sucesso, pegar os dados e mostrar numa tabela simples, que possa ser filtrada. Também preciso atualizar ela se rolar alguma mudança no servidor. Eu tava pensando se era uma boa usar jQuery pra pegar os dados via AJAX e jogar eles na tela.</p><p><em>Não cara, pelo amor de deus. Ninguém usa jQuery mais. Você devia tentar aprender React, estamos em 2016!</em></p><p>Beleza. O que é React?</p><p><em>React é uma biblioteca foda feita por uma galera do Facebook, que te deixa completamente no controle da tua aplicação. Ela deixa tu manipular qualquer alteração que rola na view de um jeito super fácil. E nem vou falar da performance, é incrível.</em></p><p>Porra, gostei ein! Eu posso usar React pra exibir os dados do servidor, então?</p><p><em>Sim, mas primeiro você precisa adicionar o React e o React DOM como bibliotecas na sua página.</em></p><p>Ué, duas bibliotecas?</p><p><em>Sim, uma é o React mesmo, a outra é pra manipular o DOM, que você pode escrever em JSX.</em></p><p>O que é JSX?</p><p><em>JSX é só uma extensão do JavaScript que parece XML. Pensa que é tipo um HTML, só que melhor. É outro jeito de descrever o DOM.</em></p><p>Qual o problema do HTML?</p><p><em>É 2016 cara, ninguém escreve em HTML diretamente.</em></p><p>Ok. Então se eu adicionar essas duas bibliotecas é só usar o React?</p><p><em>Não exatamente. Você precisa adicionar o Babel, e aí sim você va puder usar o React.</em></p><p>Outra biblioteca? O que é o Babel?</p><p><em>Ah, o Babel é um transpiler que permite você direcionar seu código JavaScript para outras versões específicas do JavaScript. Você não PRECISA incluir o Babel pra usar o ReactJS, mas se você não colocar, você vai estar limitado a usar ES5, e por favor né, vamo falar sério, é 2016, você tem que tá programando em ES2016 feito todo mundo, porra.</em></p><p>ES5? ES2016? Eu tô ficando perdido. O que é ES5 e ES2016?</p><p><em>ES5 significa ECMAScript 5. É a versão que a maioria da galera direciona o código transpilado pois é a versão que é completamente implementada pela maioria dos navegadores atuais.</em></p><p>ECMAScript?</p><p><em>Sim, cê tá ligado. O JavaScript é um dialeto do ECMAScript desde 1999, uma evolução pra 1995, quando ainda era chamado de Livescript e só funcionava no Netscape. Era uma confusão da porra naquele tempo, mas felizmente as coisas entraram no eixo e agora tudo está mais claro. A gente tem 7 edições do ECMA desde essa padronização.</em></p><p>7 edições. Beleza. E o ES5 e ES2016 são?</p><p><em>A quinta e a sétima implementação.</em></p><p>E a sexta?</p><p><em>A sexta é o ES6. Tipo, cada edição é um superset da edição anterior, então se você tá usando ES2016 tá de boa, você tá usando tudo da versão anterior também.</em></p><p>Entendi, então não dá pra usar ES6</p><p><em>Olha, dar, dar… dá. Mas pra usar funcionalidades como async e await precisa da ES2016. Do contrário, você vai tá limitado pelos geradores do ES6 que usam co-rotinas pra bloquear chamadas assíncronas, só assim dá pra ter um controle de fluxo bom.</em></p><p>Ok, eu não faço a mais puta ideia do que caralhos você acabou de falar. Todos esses nomes estão extremamente confusos. Olha, eu só quero carregar uns dados de um servidor. Era só adicionar o jQuery via um CDN da vida e pegar os dados via AJAX. Não dá pra só fazer isso?</p><p><em>Cara, é 2016. Ninguém usa jQuery mais, o código fica horroroso. Todo mundo sabe disso.</em></p><p>Certo. Então minha alternativa é carregar três bibliotecas para carregar dados e preencher uma tabela feita em HTML?</p><p><em>JSX.</em></p><p>Que seja.</p><p><em>Sim. Mas vê só, você pode colocar essas bibliotecas por um gerenciador de módulos, aí ele faz um bundle transformando tudo num arquivo só.</em></p><p>Saquei. E o que é um gerenciador de módulos?</p><p><em>A definição em si depende do ambiente que você tá executando, mas na web isso geralmente significa qualquer coisa que suporte os módulos AMD ou CommonJS.</em></p><p>Ah, claro! E AMD e CommonJS são…?</p><p><em>Definições. Existem maneiras de descrever como várias bibliotecas JavaScript interagem entre si. Você sabe, exports e requires? Você pode escrever vários arquivos JS separados e defini-los via a API AMD ou do CommonJS e usar algo tipo o Browserify pra fazer o bundle.</em></p><p>Faz sentido… eu acho. O que é o Browserify?</p><p><em>É uma ferramenta foda que permite você a fazer um bundle de módulos do CommonJS descritos como dependências de um projeto e rodá-los diretamente do navegador. Ele foi criado pois a maioria da galera publica essas dependências no npm registry.</em></p><p>npm registry?</p><p><em>É uma lista enorme de repositórios onde um pessoal foda posta códigos e dependências como módulos. O React tá lá, por exemplo.</em></p><p>Ahh, tipo um CDN?</p><p><em>Nah. É tipo um banco de dados centralizado onde qualquer um consegue publicar e baixar bibliotecas, aí você usa localmente pra desenvolvimento. Você pode dar upload pra uma CDN depois, quando tiver em produção.</em></p><p>Entendi, é tipo o Bower!</p><p><em>É… mas é 2016. Ninguém usa mais o Bower.</em></p><p>Tô sacando. Então. Eu preciso baixar as bibliotecas via npm?</p><p><em>Isso. No caso, se você vai usar o React, você baixa o módulo e importa ele no seu código. É basicamente assim pra qualquer outra biblioteca JavaScript popular.</em></p><p>Tipo o Angular!</p><p><em>O Angular é tão 2015. Mas sim. Angular tá lá, junto do VueJS ou RxJS e outra turminha da pesada. Quer saber mais deles?</em></p><p>Vamos focar no React. Eu já tô aprendendo coisas demais. Então, eu instalo os módulos com o npm e uso com o Browserify, né?</p><p><em>Sim.</em></p><p>Parece um negócio complicado demais pra só juntar umas dependências. Muito trabalho manual</p><p><em>Realmente é, é por isso que você tem que usar um automatizador de tarefas, tipo o Grunt ou Gulp ou o Broccoli. Na verdade, esquece o Grunt. Com eles dá pra automatizar o uso do Browserify. Dá pra usar até o Mimosa.</em></p><p>Grunt? Gulp? Broccoli? Mimosa? Que merda que tu tá falando?</p><p><em>Task managers. Mas, na real, eles não são mais tão legais feito eram. A gente usava ele um tempo atrás, tipo 2015, ai a gente começou a usar Makefiles, depois npm scripts, e agora a gente tá fazendo tudo via Webpack.</em></p><p>Makefiles? Javascript virou C e C++?</p><p><em>É… Aparentemente na web a gente gosta de fazer as coisas complicadas, depois voltar ao básico e se manter nesse loop. A gente faz isso todo ano, então se tu quiser, espera um pouco que a gente vai implementar assembly na web em um ano ou dois, no máximo.</em></p><p>Não sei nem o que pensar. E sim… Webpack?</p><p><em>É tipo o Browserify, só que melhor. É outro gerenciador de módulos com funcionalidades de gerenciador de tarefas também.</em></p><p>Ok. É melhor, pois?</p><p><em>Bem, não sei se melhor é a palavra, é mais dependendo da sua opinião de como suas dependências devem estar jutinhas. Webpack permite você usar com módulos diferentes, targets diferentes, não só CommonJS, por exemplo. Dá pra usar instâncias nativas do ES6.</em></p><p>É bem confusa essa porra de CommonJS/ES6</p><p><em>Todo mundo ta’confuso. Mas relaxa, nada importa com o SystemJS.</em></p><p>Jesus Cristo. Outra-coisa-js. Beleza, o que é SystemJS?</p><p><em>Bem, diferentemente do Browserify e do Webpack 1.x, o System é um carregador de módulos dinâmico, que permite você integrad várias dependencias em vários arquivos diferentes, ao invés de fazer um arquivo JS enorme gigante.</em></p><p>Porra, mas a gente fazer um arquivo JS só não era meio que o objetivo dessa putaria toda?</p><p><em>Sim, mas com o HTTP/2 vindo a gente vai poder fazier várias HTTP requests ao mesmo tempo, então na real, ter vários arquivos é melhor.</em></p><p>Então por que a gente não coloca o JS das próprias bibliotecas direto??</p><p><em>Não seria tão efetivo. Até dá pra botar, mas precisaria adicionar o Babel também.</em></p><p>Aff. E isso seria ruim, né?</p><p><em>Sim. Você estaria pondo o JS inteiro do core do Babel, o que não seria nem um pouco eficiente pra producão. Em produção, você precisa executar uma série de tarefas pra deixar seu projeto pronto, tipo minificar os assets, passar um uglify, compilar o css, rodar um defer, també —</em></p><p>Entendi, entendi. Então se você não coloca as bibliotecas diretamente num CDN, como você faz.</p><p><em>Eu transpilaria isso do Typescript via Webpack + SystemJS + Babel.</em></p><p>Typescript? Achei que a gente tava falando até agora de JavaScript!</p><p><em>TypeScript é JavaScript. Ou melhor, é um superset do JavaScript, mais especificamente o JS da versão ES6. Cê sabe, e versão 6 que a gente falou agora pouco.</em></p><p>Caralho cara você tá querendo me foder? Você disse que o ES2016 já era um superset do ES6, por que a gente precisa dessa porra desse TypeScript agora?</p><p><em>É porque isso permite pra gente usar JavaScript como uma linguagem tipada, e reduz os erros de runtimes. É 2016, já passou da hora de adicioar tipos ao seu código.</em></p><p>E Typescript evidentemente faz isso.</p><p><em>O Flow também faz, mas ele só checa o tipo. Typescript é um superset inteiro do JavaScript que precisa ser compilado.</em></p><p>… e Flow é?</p><p><em>Um checador de tipos feito por uma galera do Facebook. Eles programaram em OCaml, afinal programação funcional é muto do caralho.</em></p><p>OCaml? Programação funcional?</p><p><em>Cara, TODO MUNDO tá usando programação funcional! Como assim você não sabe? É 2016, velho. Funções de alta ordem? Currying? Lambda? Monads?</em></p><p>Eu não faço a mais puta ideia do que você tá falando.</p><p><em>Beleza, beleza. Ninguém entende direito no começo. Olha, você só precisa saber que programação funcional é melhor do que Orientação a Objetos e é isso que a gente deveria estar usando em 2016.</em></p><p>[convertkit form=4977436]</p><p>Eu aprendi Orientação a Objetos na faculdade, não era bom?</p><p><em>Java também era antes da Oracle. Tipo, OOP já foi bom, mas teve seus dias e até tem seus usos, mas hoje em dia todo mundo notou que mudar o estado da aplicação é, tipo, chutar filhotinhos de cachorro. Então todo mundo está trabalhando com objetos imutáveis e programação funcional. Lembra quando a galera do Haskell fazia isso e a gente zoava que não dava pra usar no mundo real? Bem, ainda não dá com Haskell, mas a gente tá tentando fazer via JavaScript usando bibliotecas como a Ramda.</em></p><p>Cara, tu tá de putaria comigo e começou a inventar nomes de coisas na tua cabeça né? Ramda?</p><p><em>-Sim. É tipo Lambda, só que com R. É aquela biblioteca que o David Chambers inventou.</em></p><p>David quem?</p><p><em>-David Chambers. Um cara show. Curto o cabelo dele, muito sedoso. Você devia seguir ele no GitHub. Devia seguir o Erik Meijer também se você tiver nessa de levar programação funcional a sério</em></p><p>Erik Meij…?</p><p><em>Cara, como assim cê não conhece o Erik Meijer? ELE TEM AS MELHORES CAMISETAS DO PLANETA!</em></p><figure><img src="https://cdn-images-1.medium.com/max/830/1*NxXpxBvlz3KNupTmqHgWvQ.png" alt=""></figure><p><em>Você devia seguir também o TJ, Jash Kenas, Sindre Sorhus, Paul Irish, Addy Osmani e principalmente o Zeno Rocha.</em></p><p>Olha, Ok. Vamos parar por aqui. Tá tudo muito bom, tá tudo muito bem, mas realmente eu acho que isso tá complicado demais pra alguém que só quer pegar uns dados de uma API REST e jogar numa tabela. Eu tenho certeza que eu não preciso seguir todo esse pessoal pra fazer isso. Vamos voltar pro React. Como eu puxo algum dado do servidor via React, é parecido com o $.get()?</p><p><em>Bem, na verdade você não consegue fazer nenhum request com o React.</em></p><p>Ah, vai tomar no cu.</p><p><em>O React serve pra exibir os dados, é uma biblioteca de componentes. Só.</em></p><p>Então que porra a gente usa pra pegar os dados?</p><p><em>Ah cara, nada mais nada menos do que o mais puro JavaScript, é só usar Fetch</em></p><p>Olha, eu ia zoar que chamar de Fetch algo pra dar fetch é zoado, mas dada a quantidade de nome que você vomitou eu vou ficar calado.</p><p><em>Né? Fetch é a implementação nativa para fazer XMLHttpRequests para um servidor.</em></p><p>Ah, AJAX.</p><p><em>Sim, e não. AJAX é só o uso dos XMLHttpRequests. Mas sim. Fetch permite você a fazer requisições em AJAX, mas baseadas em promessas, o que é ótimo pra evitar o famoso callback hell.</em></p><p>Inferno de callbacks?</p><p><em>Sim. Toda vez que você realiza um request assíncrono para o servidor, você precisa esperar a resposta, o que te obriga a adicionar funções dentro de funções, o que é um inferno pra qualquer aplicativo mais robusto.</em></p><p>E se a gente usar promessas isso se resolve?</p><p><em>Exato. Manipulando os callbacks via promessas é mais fácil de escrever e ler o código, além de ser mais simples de testar. E também rola de ele fazer vários requests ao mesmo tempo e esperar todas ficarem carregadas pra executar alguma coisa.</em></p><p>O Fetch faz isso tudo?</p><p><em>Sim, mas só se você tiver usando um navegador com as implementações mais novas do ES2016, que é basicamente o que ninguém tem. Então a gente precisa por um polyfill pro Fetch, ou usar Request, talvez o Bluebird ou o Axios.</em></p><p>Velho, em nome de Jesus, quantas bibliotecas eu preciso saber? Quantas existem?</p><p><em>Cara, é 2016. É JavaScript. Tem milhões de bibliotecas pra fazer a mesma coisa. A gente sabe fazer biblioteca. A gente sabe fazer biblioteca pra caralho. A gente faz muita biblioteca e não é pouco.</em></p><p>Ok… Bluebird, Request, Axios? Na real eu nem sei mais porquê tô perguntando.</p><p><em>São bibliotecas que permitem executar XMLHttpRequests que retornam promessas.</em></p><p>Eu ouvi que jQuery tá retornando promessas com o AJ —</p><p><em>Shh, a gente não usa essa palavra que começa com “jQ” em 2016. Use Fetch, e repita comigo “você é livre”. Se precisar de polyfill, coloque. Ou use Bluebird, Request, Axios, que seja. Ai gerencie isso com await e async e aí é só correr pro abraço.</em></p><p>Eu ainda não entendi o que e await.</p><p><em>Await permite você a bloquear uma chamada assíncrona, permitindo você a ter um controle melhor quando os dados vem do servidor, além de deixar o código mais legivel. É muito foda, você só precisa ter certeza de selecionar o stage-3 como preset no Babel ou usar os plugins syntax-async-functions e transform-async-to-generator, tem lá no npm.</em></p><p>Isso já ta ficando insano.</p><p><em>Insano? Insano é ter que precisar precompilar TypeScript e transpilar isso pra Babel pra conseguir usar await. Vê que trabalho. Nunca que eu vou perder tempo fazendo isso.</em></p><p>Isso não deveria estar no TypeScript?</p><p><em>Deveria, e está na versão 2.0. Mas na 1.7 que é a que quase todo mundo usa no momento, ela só foca no ES6, então se você quer usar await no navegador, primeiro você precisa compilar seu Typescript pra ES6 e depois fazer o transpile dele via Babel pra ES5.</em></p><p>Eu não sei mais o que falar.</p><p><em>Olha, é fácil. Programe tudo em TypeScript. Todos os módulos que usam Fetch, compile eles pra ES6, faça o transpile pro Babel (não esquecendo do stage-3) e carregue eles via SystemJS. Se você não tiver o Fetch, usa polyfill, Bluebird, Request… já falei.</em></p><p>Temos conceitos bem diferentes sobre o que é “fácil”. Então, depois de eu fazer isso aí, invocar Exu Caveirinha e tomar uma cachaça eu finalmente consigo obter os dados né? Aí é só usar o React pra renderizar, certo?</p><p><em>Teu app vai trabalhar com mudança de estados?</em></p><p>Caralho cara, eu não faço ideia. Eu só quero mostrar os dados numa tabela. Acho que não.</p><p><em>Ah, ainda bem! Se não eu ia ter que explicar Flux e as implementações tipo o Flummox, Alt, Fluxible&#8230; Se bem que na real o ideal é usar Redux.</em></p><p>Você tá inventando essa porra desses nomes né.</p><p><em>Olha, se é realmente SÓ exibir dados, você nem precisa do React pra começar. É mais tranquilo usar algum template engine, eu acho.</em></p><p>Depois de todo pentateuco do JavaScript atual ser ditado em minha frente você tá falando que eu não preciso de nada disso? Cê ta de sacanagem com a minha cara, o que foi que eu te fiz?</p><p><em>Eu só tava explicando o que você podia usar, ué.</em></p><p>Para. Só para.</p><p><em>Tipo, mesmo só usando algum template engine, eu ainda pegaria o combo TypeScript + SystemJS + Babel se eu fosse você.</em></p><p>Cara, eu só quero pegar as informações de um servidor e exibir numa tabela. Eu não quero a combinação de códigos pra pegar o Jetpack no GTA.</p><p><em>Qual template engine você manja?</em></p><p>Não consigo lembrar de cabeça. Faz tempo que não trabalho com a web?</p><p><em>jTemplates? jQote? PURE?</em></p><p>Err… não</p><p><em>Transparency? JSRender? MarkupJS? KnockoutJS? Knockout foi a primeira a ter two-way databinding.</em></p><p>Próximas</p><p><em>PlatesJS? jQuery-tmpl? Handlebars? Tem gente que ainda usa.</em></p><p>Handlebars não me é estranho, mas não era essa…</p><p><em>Mustache, underscore? Acho que loadash também já foi, mas 2014 já passou</em></p><p>Err&#8230; não.</p><p><em>Jade? DustJS?</em></p><p>Não</p><p><em>DotJS? EJS?</em></p><p>Não</p><p><em>-Nunjucks? ECT?</em></p><p>Não</p><p><em>Ainda bem, ninguém gosta de Coffeescript mesmo. Jade?</em></p><p>Você já tinha falado Jade.</p><p><em>Eu queria dizer Pug. Que é Jade. Quer dizer, Jade agora chama Pug.</em></p><p>Não, nenhuma dessas… qual eu deveria usar?</p><p><em>Provavelmente os templates nativos que já vem com o ES6.</em></p><p>Deixa eu ver, pra usar isso, eu preciso do ES6.</p><p><em>Precisamente.</em></p><p>Que, dependendo do navegador, eu tenho que usar o Babel.</p><p><em>Boa.</em></p><p>Que se eu quiser usar uma biblioteca, e não ter que colocar todo o código, eu preciso carregar ela como um módulo, via npm</p><p><em>Estamos maravilhosamente bem.</em></p><p>Que precisa de Browserify, Wepback ou SystemJS.</p><p><em>Isso. Ou Rollup.js que acabou de sair.</em></p><p>Que se não for usando o Webpack, eu tenho que usar algum task runner.</p><p><em>Correto.</em></p><p>Mas como eu deveria estar usando programação funcional e linguagens tipadas, eu deveria primeiro programar em TypeScript e pré-compilar, ou usar esse tal de Flow.</p><p><em>Isso, estamos indo bem.</em></p><p>E depois mandar meu código pro Babel se eu quiser usar await.</p><p><em>Isso!</em></p><p>Aí eu consigo usar Fetch, promessas, e toda a magia que o JavaScript de 2016 pode me proporcionar.</p><p><em>Lembra do polyfill. E cuidado com o Safari que ele não tem isso implementado ainda.</em></p><p>Quer saber, cara. Foda-se. Foda-se toda essa merda. JavaScript que se foda. Eu não tenho paciência pra ficar aprendendo tanta coisa em JS pra uma operação tão simples quanto exibir uma tabela na tela.</p><p><em>Tudo bem, em alguns anos a gente vai tá programando em Elm ou WebAssembly. JavaScript se pá logo logo morre.</em></p><p>Eu vou ficar é com meu backend mesmo. Eu não consigo aguentar tanta mudança o tempo todo, mal dá pra respirar. Se vocês acham que vão manter uma comunidade assim, cês tão fudido.</p><p><em>A gente meio que sabe disso. Tudo bem. Você devia conhecer a comunidade de Python, então.</em></p><p>Por quê?</p><p><em>Já ouviu falar do Python 3?</em></p>]]></content:encoded>
      
      <comments>https://joseli.to/como-e-programar-em-javascript-em-2016/#disqus_thread</comments>
    </item>
    
    <item>
      <title>O Ionic 2 RC saiu! Seu @App acabou de quebrar (de novo)!</title>
      <link>https://joseli.to/o-ionic-2-rc-saiu-seu-app-acabou-de-quebrar-de-novo/</link>
      <guid>https://joseli.to/o-ionic-2-rc-saiu-seu-app-acabou-de-quebrar-de-novo/</guid>
      <pubDate>Tue, 04 Oct 2016 21:40:26 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;em&gt;Meu Webpack está MORTO, tens o que é necessário para esmagar o meu Rollup?&lt;/em&gt;&lt;/p&gt;&lt;figure&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/
      
      </description>
      
      <content:encoded><![CDATA[<p><em>Meu Webpack está MORTO, tens o que é necessário para esmagar o meu Rollup?</em></p><figure><img src="https://cdn-images-1.medium.com/max/1024/0*LRaYtQ1WNh_9JUaS.png" alt=""></figure><p>Nada como um <strong>Release Candidate</strong> para por um sorriso na cara de quem tá trabalhando com betas. Só quem viveu sabe as imagens de dor e sofrimento das últimas atualizações do Ionic 2. Mas tudo compensa pra ver um projeto como esse crescer.</p><p>Vamos falar um pouquinho das mudanças desse RC0, <strong>que olha, não foram poucas</strong>.</p><h4 id="O-Angular-2-final-esta-entre-nos"><a href="#O-Angular-2-final-esta-entre-nos" class="headerlink" title="O Angular 2 final está entre nós"></a><strong>O Angular 2 final está entre nós</strong></h4><p>Se tá liberado, vamo usar valendo! A gente já usava sem liberar, agora só tá organizado: as APIs estão finalizadas. Além disso, veio de brinde o <strong><em>@NgModules</em></strong> pro Ionic, que permite a gente escrever apenas uma vez algumas coisas que a gente tinha que repetir pra cada <strong><em>@Component</em></strong>, como por exemplo os providers.<span id="more-9"></span></p><p>Além disso, o AoT do Angular 2 deixou os Apps rápidos feito foguetes. Provavelmente ele o maior motivo das mudanças de estruturas do <strong>beta11 </strong>pro <strong>rc0</strong>. Se você estava usando o beta e o app ficava um tempo considerável como uma página em branco (ou congelado na Splash Screen) antes de carregar, agora isso sumiu. Tipo assim:</p><h4 id="Nova-estrutura-e-processo-de-Build"><a href="#Nova-estrutura-e-processo-de-Build" class="headerlink" title="Nova estrutura e processo de Build"></a>Nova estrutura e processo de Build</h4><p>O build mudou, baseado no scraffhold do <em>Create-React-App</em>, ele agora usa o <strong>Rollup.js</strong> no lugar do _Webpack _e <strong>npm scripts</strong> no lugar do <em>Gulp</em>. Felizmente, eles são retrocompatíveis, então você pode continuar a usar seus scripts do Gulp sem problemas.</p><p>Ou seja, basicamente, agora o Ionic te entrega um Workflow. Se você quiser usar, ótimo. Se não, você faz o seu do seu jeitinho.</p><p>A estrutura de pastas também mudou. Não temos mais a pasta <em>“app”</em>, e agora veio a incrível <em>“src”</em>, que trouxe junto uma pasta pra <em>assets </em>(uma coisa que a gente tinha que gerir ou manualmente, ou fazer algum script via gulp).</p><h4 id="Outros-pormenores"><a href="#Outros-pormenores" class="headerlink" title="Outros pormenores"></a>Outros pormenores</h4><p><strong>Chegou o TypeScript 2.0 também</strong></p><p>**Mudaram os eventos de Lifecycle</p><p>**Pra você que ama programação reativa</p><p><strong>A navegação agora tem fila</strong></p><p>Isso significa que se você fizer isso aqui:</p><pre>_navCtrl_.push(**Page1**);
_navCtrl_.push(**Page2**);</pre><p>Vai rolar a transição pra página um, e depois de acabar, vai rolar a transição pra página dois. Antes ela ia pra página dois, diretamente.</p><h4 id="Varios-componentes-mudaram-tambem"><a href="#Varios-componentes-mudaram-tambem" class="headerlink" title="Vários componentes mudaram também"></a>Vários componentes mudaram também</h4><ul><li>Agora é <strong><em>&lt;button ion-button&gt;</em></strong>, não mais <strong><em>&lt;ion-button&gt;</em></strong>. Por motivos de usabilidade, porque ela importa.</li><li>O jeito de definir as cores também mudaram. Antes era <strong><em>&lt;ion-tabs primary&gt;</em></strong>, agora é <strong><em>&lt;ion-tabs color=”primary”&gt;</em></strong>. Quem já tentou mudar dinamicamente as cores de componentes nos betas deve ter percebido o inferno que é. Agora é só fazer um <strong><em>[color] </em></strong>e sucesso.</li><li>Botões com ícones agora precisam declarar que tem ícones com as propriedades <strong><em>ion-button</em></strong> e<strong><em> icon-left|right|only</em></strong>. Isso melhora a performance da renderização, já que antes era necessário ver os filhos para poder estilizar os pais, agora isso é feito diretamente.</li><li>É um css só, <strong><em>main.css</em></strong>. Sem precisar ver dinamicamente qual plataforma está sendo executada. Tudo pra deixar mais rápido!</li></ul><p>Tem mais uma porrada de coisa, se você for dar uma olhada no <a href="https://github.com/driftyco/ionic/blob/master/CHANGELOG.md" target="_blank" rel="external">CHANGELOG.md</a>.</p><h4 id="Quebrou-tudo"><a href="#Quebrou-tudo" class="headerlink" title="Quebrou tudo"></a>Quebrou tudo</h4><p>Inclusive, seu app quebrou, então, atualize o Ionic-CLI com muito cuidado, amor e carinho.</p><p>Essa semana sai um tutorial, passo a passo, de como atualizar o app do beta pro RC.</p><p><strong><em>Beijos de luz.</em></strong></p>]]></content:encoded>
      
      <comments>https://joseli.to/o-ionic-2-rc-saiu-seu-app-acabou-de-quebrar-de-novo/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Regras de negócio no Firebase (ou quase)</title>
      <link>https://joseli.to/regras-de-negocio-no-firebase-ou-quase/</link>
      <guid>https://joseli.to/regras-de-negocio-no-firebase-ou-quase/</guid>
      <pubDate>Thu, 29 Sep 2016 05:07:26 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;em&gt;Porque ele é mais do que um Banco de Dados que atualiza sozinho.&lt;/em&gt;&lt;/p&gt;&lt;figure&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/1024/1
      
      </description>
      
      <content:encoded><![CDATA[<p><em>Porque ele é mais do que um Banco de Dados que atualiza sozinho.</em></p><figure><img src="https://cdn-images-1.medium.com/max/1024/1*mSfaQfUwDFCFyKPvFYEHOw.jpeg" alt=""></figure><p>O <strong>Firebase </strong>é poderoso e acho que todo mundo hoje em dia está de acordo com isso. A versão 3.0 mostrou que não tá aí de brincadeira e já tem uma <a href="https://firebase.google.com/customers" target="_blank" rel="external">galera topster</a> usando em produção.</p><p>Mas se tem uma coisa confusa sobre o Firebase é sobre como a sua segurança e regras funcionam. Quem tá acostumado com um CRUD clássico, onde ele escreve as regras e validações antes daquele conteúdo que o usuário criou ir pra o banco de dados.</p><p>Alguns acham que a validação e implementação de regras de segurança devem ser do lado do <strong><em>frontend</em></strong>. Mais absurdo que isso, apenas aqueles que acham que o <strong>Firebase </strong>não faz qualquer verificação, e qualquer um que conseguir o conjunto de chaves vai pintar e bordar com seu <em>backend</em>.</p><p>Trago boas novas. É compreensível a dúvida já que praticamente todo conteúdo que existe sobre <strong>Firebase </strong>é demonstrando como fazer _get _e _set _de variável, e mostrando como é fofinho mudando os valores em tempo real. Quantas vezes eu não ouvi que o Firebase é top pra fazer um <strong>Dashboardzinho</strong>, mas pra projeto “<em>de verdade</em>” precisa de banco de dados “<em>de verdade</em>”. Parece até um eleitor do Trump falando (ou talvez do Dória).</p><p>Vem conhecer o <strong>Firebase Rules.</strong><span id="more-11"></span></p><figure><img src="https://cdn-images-1.medium.com/max/720/1*8yM-gC7g_fsX8ULyFZZebQ.jpeg" alt=""><figcaption>João Dória comendo coisas. Sem motivo.</figcaption></figure><h4 id="E-tudo-JavaScript-mesmo"><a href="#E-tudo-JavaScript-mesmo" class="headerlink" title="É tudo JavaScript mesmo"></a>É tudo JavaScript mesmo</h4><p>O Firebase Rules se utiliza de uma sintaxe própria para descrever as regras. Tal qual o próprio banco de dados, ele é um arquivo JSON enorme, onde usamos determinadas variáveis na estrutura de dados.</p><p>No seu console, vá em <strong>Database </strong>no menu lateral e clique na aba <strong>Rules</strong>. Logo quando você cria um projeto no Firebase, ele vai vir assim:</p><pre>{ 
  "rules": {
    ".read": "auth != null",
    ".write": "auth != null"
  }
}</pre><p><em>“rules”</em> é nosso objeto raiz, equivalente ao objeto raiz do banco. Tudo que estiver abaixo dele em hierarquia vai ser correspondido ao objeto no banco do Firebase.</p><p>Além disso, repare nas primeiras palavras reservadas que temos: <em>“.read”</em> e <em>“.write”</em>. É isso mesmo que você tá pensando: <em>.read</em> define as regras de leitura e <em>.write</em> define as regras de escrita. Perceba também que a informação recebida sempre é uma <strong>expressão que retorna um booleano</strong>.</p><p>Ou seja, toda vez que alguma operação for realizada no banco de dados, o Firebase vai lá nas Rules ver quais são as regras aplicadas a aquele objeto, rodar a verificação e ver se ela passa ou não.</p><blockquote><p>Ok. Top. Mas como ele sabe quem foi que fez essa operação pra saber se ela vai ser válida?</p></blockquote><p>Excelente pergunta. O código acima basicamente está dizendo que para ler e escrever, o usuário precisa estar autenticado. <em>“auth”</em> é mais uma palavra reservada do Firebase, sendo esta uma representação do objeto de autenticação do usuário que está fazendo determinada requisição. Se _auth _não é null, então isso significa que o usuário está logado.</p><p>**E se eu quiser que todo mundo tenha acesso?</p><p>**Fácil. É só fazer algo mais ou menos assim:</p><pre>{ 
  "rules": {
    ".read": "auth != null",
    ".write": "auth != null",
    "public": {
        ".read": true,
        ".write": true
    }
  }
}</pre><p>Como sempre é retornado um valor booleano, o que estamos querendo dizer acima é que, o que está dentro do objeto “public” é acessível para leitura e escrita para qualquer pessoa que esteja acessando sua aplicação. Isso é maravilhoso e terrível se você souber (ou não) o que está fazendo.</p><h4 id="Mais-que-autenticacao"><a href="#Mais-que-autenticacao" class="headerlink" title="Mais que autenticação"></a>Mais que autenticação</h4><p>Usamos o _auth _como exemplo geral para verificar a segurança das coisas. Mas há outras formas de verificar sem utiliza-lo (ou utilizando ele em conjunto).</p><p>Por exemplo, você quer escrever um dado uma vez, e apenas uma vez, no banco. Ele pode até ser apagado, mas não pode ser sobrescrito. É só fazer algo assim:</p><pre>".write": "!data.exists() || !newData.exists()"</pre><p>Aqui conhecemos mais duas palavras reservadas: _data _e <em>newData</em>. O _data _representa o objeto que armazena o valor atual do nó. De maneira análoga, _newData _serve para representar o valor futuro do nó, caso a operação realmente se concretize, passando na validação.</p><h4 id="Valide-Eu-validaria"><a href="#Valide-Eu-validaria" class="headerlink" title="Valide. Eu validaria."></a>Valide. Eu validaria.</h4><p>Por fim, mas não menos importante, temos o <em>“.validate”</em>, que funciona de forma parecida tal qual nossos conhecidos <em>“.read”</em> e <em>“.write”</em>. Como você bem adivinhou, ele serve para verificar se o conteúdo é valido conforme as suas regras.</p><p>Se você tá fazendo seu próprio Twitter e quer ter certeza que o usuário não vai digitar mais de 140 caracteres, faça isso aqui:</p><pre>".validate": "newData.val().length &lt;= 140"</pre><p>Quer validar se o usuário tá mandando um número, por exemplo? Mole.</p><pre>".validate": "newData.isNumber()"</pre><h4 id="Esta-bom-por-hoje"><a href="#Esta-bom-por-hoje" class="headerlink" title="Está bom por hoje"></a>Está bom por hoje</h4><p>Espero que você tenha entendido o básico do básico de segurança e validação do <strong>Firebase</strong>. Se você quer que eu faça uma versão mais avançada, aperta no coraçãozinho aqui no <strong>Medium </strong>e compartilha com o pessoal. Aí eu sei o conteúdo é legal e que vocês querem saber mais sobre (:</p><p>Hora de acabar com esse <a href="https://www.youtube.com/watch?v=Jzl_nrTkfIM" target="_blank" rel="external">medo bobo</a> de usar o Firebase.<img src="https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=792739ca9279" alt=""></p>]]></content:encoded>
      
      <comments>https://joseli.to/regras-de-negocio-no-firebase-ou-quase/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Fira Code: a fonte perfeita pra você codar</title>
      <link>https://joseli.to/fira-code-a-fonte-perfeita-pra-voce-codar/</link>
      <guid>https://joseli.to/fira-code-a-fonte-perfeita-pra-voce-codar/</guid>
      <pubDate>Thu, 15 Sep 2016 04:32:05 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;em&gt;Seu editor de código nunca mais vai ser o mesmo. Juro pra tu.&lt;/em&gt;&lt;/p&gt;&lt;p&gt;Quando eu não tô fazendo nada, vez por outra, eu gosto de pr
      
      </description>
      
      <content:encoded><![CDATA[<p><em>Seu editor de código nunca mais vai ser o mesmo. Juro pra tu.</em></p><p>Quando eu não tô fazendo nada, vez por outra, eu gosto de procurar Fontes na internet. Cada fonte tem uma personalidade própria e única, tal qual o nosso próprio manuscrito. Além disso, elas são os “cartões de visita” de um texto ou marca, já que só de ver (sem precisar ler) já avaliamos o conforto e coerência de determinada palavra dependendo da Fonte a qual ela é escrita. <strong>Ver um texto ou logo em <em>Comic Sans</em> já te faz refletir sobre as escolhas vida, não faz?</strong></p><p>Falar sobre fontes renderia assunto até não acabar mais. Porém, para <strong>desenvolvedores </strong>(especialmente os da Web) existe uma propriedade com a qual todos tratam — ou certamente já ouviram o termo — quando estão trabalhando com fontes: <strong>a serifa</strong>.</p><p>Certamente você já deve ter ouvido falar dos termos <strong>“sans-serif”, “serif” ou “monospace”</strong>, não? Os dois primeiros estão relacionados à serifa do texto, que nada mais é do que a “perninha” que prolonga as hastes de cada letra.</p><figure><img src="https://cdn-images-1.medium.com/max/209/1*I7swASMFZt1a86p13hA9Ng.png" alt=""></figure><p>A <strong>Helvetica</strong>, por exemplo, é uma fonte não serifada, <strong><em>sans-serif</em></strong>. Ela não tem as perninhas.</p><figure><img src="https://cdn-images-1.medium.com/max/209/1*e1ful0VHeQAmoO2l3MX7jg.png" alt=""></figure><p>A <strong>Times New Roman</strong>, por exemplo, é uma fonte serifada, <strong><em>serif</em></strong>. Ela tem perninhas.</p><figure><img src="https://cdn-images-1.medium.com/max/209/1*dikmXy4PQNbOWP-kGA4j0Q.png" alt=""></figure><p>Ao lado estão as perninhas destacadas em <strong>vermelho, </strong>para ficar mais claro.</p><p>Cada uma tem seu uso próprio e utilidade. Eu te desafio a citar 5 marcas que usam<strong> fontes com serifa</strong> no logo. Por outro lado, também te desafio a citar 5 jornais que usam <strong>fontes sem serifa</strong> para os textos das notícias.</p><p>Fontes sem serifa são notoriamente mais belas a nossos olhos, e mais marcantes. Por outro lado, fontes com serifa são mais confortáveis para uma longa leitura. Não é a toa que exatamente esse texto, que você está lendo agora, tem um título com fonte não-serifada e possui todo corpo com uma fonte serifada.</p><p><strong>Mas para nós, desenvolvedores, ainda estamos acostumados a lidar diariamente com outro tipo de fonte: a mono-espaçada.</strong></p><p>Fontes mono-espaçadas são auto-explicativas: todos os caracteres possuem o mesmo tamanho. Inventaram isso com a máquina de escrever: ela sabia que, a cada caractere digitado, tinha que mover o cabeçote sempre a mesma distância. Os computadores roubaram as fontes mono-espaçadas pela imensa limitação que os primeiros monitores tinham, então era muito mais fácil de programar sabendo quantos pixels cada fonte iria ocupar na tela.</p><p>E, pra programação, texto mono-espaçado tem uma vantagem a mais: como quando estamos desenvolvendo, estamos trabalhando com vários símbolos fora do padrão de nossa escrita tradicional, utilizar fontes que têm os caracteres de mesmo tamanho contribuem muito na legibilidade, mais do que qualquer outra fonte serifada.</p><p>Mas, porém, contudo, todavia, entretanto… Fontes mono-espaçadas não são as mais eficientes para a exibição de caracteres, principalmente quando a gente precisa combinar símbolos, se perde muito espaço de tela.</p><p><strong>Pensando em resolver um problema que a gente não sabia que tinha, fizeram a Fira Code.</strong></p><figure><img src="https://cdn-images-1.medium.com/max/888/1*_ZtbmRSF2_xKM28JTFfPww.png" alt=""></figure><p><strong>A Fira Code</strong>, como tudo que é bom, quebra algumas regras pra conseguir seu objetivo. Ela é uma fonte <strong>mono-espaçada</strong>, travestida de <strong>fonte sem-serifa</strong>, porém com uma propriedade muito interessante de <strong>fontes serifadas</strong>: a ligadura.</p><p>As ligaduras tipográficas nasceram no nosso manuscrito tradicional, pois somos preguiçosos: por que que eu vou usar mais de um caractere se eu posso fazer um só? O símbolo ‘<em>&amp;’</em> nada mais é do que a representação de <em>et</em>, porém sendo traçado com uma única reta (tenta fazer no papel, ‘<em>Et’</em>, com uma reta só). Nunca te contaram isso antes, né?</p><p>E justamente nos símbolos, a Fira Code usa essas ligaduras para transformar dois símbolos num terceiro. Pra entender melhor, veja esse print printoso de um código JavaScript:</p><figure><img src="https://cdn-images-1.medium.com/max/1024/1*PPIk275EAe_XkfNyiHrbFw.png" alt=""></figure><p>Repare como<strong> !! </strong>ocupa seu espaço de maneira mais distribuída que a fonte que você tá usando agora no seu Editor ou IDE. Olha o <strong>==</strong>, como tá show sendo um simbolo só? E como não amar o <strong>&lt;=</strong>, também representado apenas por um caractere?</p><p>Se você curte drogas mais pesadas, se liga nesse print de Clojure:</p><figure><img src="https://cdn-images-1.medium.com/max/1024/1*OIT8K_LFvbDLIzA0QIZMgg.png" alt=""></figure><p>Fica até mais claro, mesmo sendo Clojure!</p><p><strong>O melhor de tudo é que a Fira Code é Open Source e completamente gratuita.</strong></p><p>Ela é compatível com um monte de Terminais, Editores de Texto e IDEs, tá tudo lindamente documentado aqui no GitHub deles: <a href="https://github.com/tonsky/FiraCode" target="_blank" rel="external"><strong><em>https://github.com/tonsky/FiraCode</em></strong></a></p><p>Tire 20 minutos do seu dia de hoje para baixar a Fira Code e configurá-la no seu terminal e no seu editor de texto. Garanto que sua experiência de programação vai melhorar. Se não melhorar, eu devolvo seu dinheiro.</p><p>Me agradeça depois.</p>]]></content:encoded>
      
      <comments>https://joseli.to/fira-code-a-fonte-perfeita-pra-voce-codar/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Material Design no Ionic 2, na força bruta</title>
      <link>https://joseli.to/material-design-no-ionic-2-na-forca-bruta/</link>
      <guid>https://joseli.to/material-design-no-ionic-2-na-forca-bruta/</guid>
      <pubDate>Thu, 08 Sep 2016 20:08:37 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;em&gt;Como definir o Material Design como padrão, mesmo no iOS, modificando Config do seu &lt;/em&gt;&lt;strong&gt;&lt;em&gt;@App&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;&lt;figure&gt;&lt;i
      
      </description>
      
      <content:encoded><![CDATA[<p><em>Como definir o Material Design como padrão, mesmo no iOS, modificando Config do seu </em><strong><em>@App</em></strong></p><figure><img src="https://cdn-images-1.medium.com/max/1024/1*bk6rY40xsdgKk4tsT5wAUA.png" alt=""></figure><p>O Ionic 2 é lindo. Sério. Principalmente nos seus componentes feitos usando os princípios do Material Design. Diferente do Ionic 1.x, onde teríamos que utilizar alguma biblioteca como o <a href="http://ionicmaterial.com" target="_blank" rel="external">Ionic Material</a>, tudo já vem prontinho de fábrica pra a gente aproveitar.</p><p>Claro que os temas para iOS e Windows também estão lá, nada mudou. Mas se você está fazendo toda sua identidade visual baseada no Material, provavelmente você irá querer manter essa consistência entre plataformas.</p><p>Fazer isso no Ionic 2 é bem simples, utilizando o _Config _do módulo _ionicBootstrap, <em>que está no pacote</em> ionic-angular_:</p><pre>**import** { ionicBootstrap } from ‘ionic-angular’;</pre><p>O <em>ionicBootstrap</em> é equivalende ao Bootstrap do Angular 2, que “avisa” qual componente será o root da nossa aplicação. Ele já está devidamente importado e chamado no <strong>app/app.ts</strong> do seu aplicativo.</p><p>Vá para a última linha, e lá estará ele:</p><pre>ionicBootstrap(BitBar);
// Por sinal, você já baixou o [**BitBar**](https://play.google.com/store/apps/details?id=space.joselito.bitbar)?</pre><p>O <em>ionicBootstrap</em> recebe (até) três parâmetros, o componente Root, os Custom Providers e o objeto Config. É deste último que iremos tratar no dia de hoje.</p><h4 id="Config"><a href="#Config" class="headerlink" title="Config"></a>Config</h4><p>O Config nada mais é do que um simples objeto onde definimos determinadas propriedades. A primeira coisa é adiciona-lo ao Bootstrap:</p><pre>ionicBootstrap(BitBar, [], **{****}**);</pre><pre>// O Config é o terceiro parâmetro, então estamos passando um array vazio no parâmetro do Custom Providers. Trataremos dele em outro post.</pre><p>Para implementarmos a ideia original do post, basta definirmos o _mode <em>como </em>“md”:_</p><pre>ionicBootstrap(BitBar, [], **{
  mode: 'md'
}**);</pre><p>Prontinho! Estamos avisando ao Ionic que queremos que o modo <strong>sempre seja </strong>o Material, independente da plataforma real do dispositivo utilizado.</p><p>Esse é só um exemplo do que o Config é capaz. Podemos por exemplo, forçar com que as abas apareçam sempre no topo, é só fazer isso aqui:</p><pre>ionicBootstrap(BitBar, [], **{
  mode: 'md',
  tabsPlacement: 'top'**
**}**);</pre><p>Quer usar o Material, mas acha os Ícones do iOS mais bonitinhos?</p><pre>ionicBootstrap(BitBar, [], **{
  mode: 'md',
  iconMode: 'ios'**
**}**);</pre><pre>// Atenção, não é porque você pode que você deve.</pre><p><a href="http://ionicframework.com/docs/v2/api/config/Config/" target="_blank" rel="external">Na documentação oficial do Ionic 2 existem inúmeros exemplos</a> de como podemos utilizar o Config para manipularmos nosso App. Mas lembrem sempre, crianças, com grandes poderes vem grandes responsabilidades.</p>]]></content:encoded>
      
      <comments>https://joseli.to/material-design-no-ionic-2-na-forca-bruta/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Eu acho que a Apple dessa vez tá errada.</title>
      <link>https://joseli.to/eu-acho-que-a-apple-dessa-vez-ta-errada/</link>
      <guid>https://joseli.to/eu-acho-que-a-apple-dessa-vez-ta-errada/</guid>
      <pubDate>Thu, 08 Sep 2016 18:30:34 GMT</pubDate>
      <description>
      
        &lt;figure&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/1024/1*6-ZM5p7a85UXHZd5aBnuAw.png&quot; alt=&quot;&quot;&gt;&lt;/figure&gt;&lt;p&gt;Sim, ninguém pediu minha opinião
      
      </description>
      
      <content:encoded><![CDATA[<figure><img src="https://cdn-images-1.medium.com/max/1024/1*6-ZM5p7a85UXHZd5aBnuAw.png" alt=""></figure><p>Sim, ninguém pediu minha opinião. Mas é preciso ter <strong><em>coragem</em></strong>.</p><h2 id="1998"><a href="#1998" class="headerlink" title="1998"></a>1998</h2><p>No ano que o Romário tinha sido cortado da Copa, injustiça essa que só veio se equiparar ao fato do iFood ter tirado o PayPal do seu aplicativo nos últimos dias. 1998 também foi um ano de um lançamento marcante para a Apple: <strong>nascia o iMac</strong>.</p><figure><img src="https://cdn-images-1.medium.com/max/1024/1*o3AhDh6wzZ901muIAIj6hw.jpeg" alt=""><figcaption>Trivia irrelevante: eu tenho um desses, quebrado. Um amigo meu me deu há poucos anos.</figcaption></figure><p>Você em 98 podia não fazer ideia de que a Apple existia, mas se você já era micreiro, conhece sua influência mesmo sem saber. Afinal, esse visual translucido virou moda até pra saboneteira. Meu primeiro PC, comprado anos depois do lançamento dessa belezura, tinha o mouse que era uma cópia completa do mouse do iMac. Só que melhor, tendo em vista este que não era essa <a href="https://en.wikipedia.org/wiki/Apple_USB_Mouse" target="_blank" rel="external">aberração completamente circular</a>.</p><p>Mesmo com um mouse de gosto duvidoso, a mídia da época caiu em cima de outra coisa: os iMacs não tinham entrada para Disquetes. Isso seria o instantâneo suicídio da Apple, que estava voltando os eixos com o retorno o seu iCEO, Steve Jobs (sim, iCEO era um cargo de verdade, <a href="https://www.youtube.com/watch?v=JgHtKFuY3bE" target="_blank" rel="external">o Jobs foi iCEO até 2000</a>)</p><p>Hoje em dia,<strong> Disquetes são uma impressão 3D do ícone de salvar.</strong></p><h2 id="2008"><a href="#2008" class="headerlink" title="2008"></a>2008</h2><p>Um ano antes a Apple tinha finalmente resolvido um problema que a gente não sabia que tinha: inventou o que hoje entendemos por smartphone, com o <strong>iPhone</strong>.</p><p>Ainda em 2008, o iPhone 3G seria anunciado e ia ser, de fato e de direito, a primeiro <em>hit popular</em> da Apple, chegado a um nível mais mainstream.</p><p>Só que era pouco. Se tinham acabado de reinventar o telefone (palavras próprias, deles), também não estavam muito contentes da maneira com que os notebooks eram não. Aí eles me vem com isso aqui: o MacBook Air.</p><p>Quem acompanhou na época certamente se arrepia até hoje revendo esse vídeo. _Mas como diabos eles fizeram um computador tão estupidamente fino? _E o que dizer dessa música.</p><p>Para fazer um computador tão fino, eles tiveram que fazer certas mágicas. Sim, mágica, por que qualquer <a href="https://pt.wikipedia.org/wiki/Leis_de_Clarke" target="_blank" rel="external"><strong><em>tecnologia suficientemente avançada é indistinguível de magia</em></strong></a>: soldaram toda placa mãe, os discos, e tiravam todos os conectores que dava pra tirar na época.</p><p>~Todo mundo caiu de porrada. Não era pra o mercado de negócios pois não tinha VGA. Não era pra pro-users pois não tinha Ethernet. Não era pra casuais, porque era muito caro, e não valia pagar o valor num Note de Gamer nele. <em>E, oras, como vou gravar meus DVDs das fotos da festa que ficaram ótimas??</em> Não tinha nenhum drive de mídia.</p><p>Ele era todo errado. <strong>Foi um sucesso. </strong>Hoje em dia todos os Notebooks atuais beberam da fonte que o Air encheu. Aos olhos de hoje, o Air original nem parece tão fino assim.</p><p>Das falhas mais alarmantes, o preço era um dos pontos mais falados. Isso se devia ao fato da Apple resolver usar SSD ao invés do tradicional HDD. E mano, isso em 2008 era caro, e não era pouco.</p><p>SSD, ainda são caros. Mas são caros porque HDD está <strong><em>muito barato</em></strong>. Ainda sim, o padrão de fato da indústria para computadores performáticos é entregar já com<strong> SSD de fábrica</strong>.</p><p>Inclusive, pergunte a qualquer pessoa que fez o upgrade de HDD para SSD, o que ela achou da decisão. <strong>Eu garanto</strong> que ela irá te responder, com os olhos brilhando, peito em festa e o coração a gargalhar que foi uma das melhores coisas que ela já fez na vida, e que<strong> nunca mais</strong> volta pra HDD.</p><p>Inclusive, o atual MacBook, a epítome do desenho industrial da Apple no que ser refere a Notebooks, e evolução natural do Air, tem só duas portas: uma USB-C…</p><p>…e uma <strong>entrada para fones de ouvido</strong>.</p><h2 id="2016-7-de-setembro"><a href="#2016-7-de-setembro" class="headerlink" title="2016, 7 de setembro"></a>2016, 7 de setembro</h2><p>Apple lança o seu nono iPhone, o 7 (na verdade são 14, mas só tô contando o <em>showrunner</em>). E ele não tem entrada para fones de ouvido.</p><p>A mídia não caiu tanto de pau em cima, ou talvez não caiu de pau tanto em cima ainda, pois essa boataria de que a <strong>Apple ia matar o P2</strong> vinha desde 2014. Não que alguém <em>acreditasse de fato</em> que a Apple ia fazer isso, mas todo mundo tava meio com o espírito preparado de que isso iria acontecer.</p><p>Por incrível que pareça, é compreensível. Atualmente, há uma certa corrida do ouro para reinventar a maneira com que escutamos músicas, em todas as frentes. Ninguém sabe exatamente o porquê, mas isso é real e está acontecendo nesse exato momento. E a Apple, vanguardista que é, não poderia ficar de fora sem fazer sua aposta. E quando você tem mais de <strong>600 bilhões em caixa</strong> pra torrar, você pode apostar grande. E ainda sim, se foder pouco se der errado.</p><p>Porém, acho que foi um tiro incerto o que a Apple fez no dia de hoje. E olha que eu <em>nem acho que o problema é tirar o P2.</em></p><p><strong>É colocar o Lightning no lugar.</strong></p><p>Vamos viajar no tempo de novo, só um pouquinho?</p><h2 id="2001"><a href="#2001" class="headerlink" title="2001"></a>2001</h2><figure><img src="https://cdn-images-1.medium.com/max/1024/1*0k0OwkctDAZgqC9ZkV7QUA.jpeg" alt=""></figure><p>Em 2001 a Apple inventou o iPod. O primeiro <strong><em>sucessão da porra™</em></strong> mesmo que a Apple teve. Tal qual o futuro que ainda não existia, chamado iPhone, ele também não foi o primeiro dispositivo a ser como era, mas foi aquele que fez do jeito que devia ser feito. Afinal, Gotham precisa do herói que precisa, não do que ela merece.</p><p>A primeira geração já foi um sucesso, porém o que fez bombou mesmo foram dois fatos. Fatos que possivelmente você não saiba, ou não lembre, já que hoje é tudo <strong>tão diferente</strong>.</p><figure><img src="https://cdn-images-1.medium.com/max/200/1*DZxhbEYLgAQmpRdGyLIWSQ.gif" alt=""></figure><h4 id="O-iPod-nao-era-USB"><a href="#O-iPod-nao-era-USB" class="headerlink" title="O iPod não era USB"></a>O iPod não era USB</h4><p>OK, era 2001. Não que a gente já tivesse acostumado com padrões de conectores, mas o USB já era algo sólido que as fabricantes haviam abraçado. O próprio iMac — o sem disquete, que citei no início do post — é um dos exemplos citados da adoção em massa do padrão USB.</p><p>Porém o iPod possuia outro tipo de conector, o FireWire. Inventado pela própria Apple, o FireWire era, de fato e de direito, muito melhor que o USB. Pra você ter ideia, a velocidade de <a href="http://www.macworld.com/article/1145224/storage/firewire-usb.html" target="_blank" rel="external">transferência de arquivos do FireWire só veio ser ultrapassada com pelo o USB com a chegada do USB 3.0</a>, a atual versão.</p><p>Em parte, a Apple usar cabos ~diferentões pros seus iDevices continuou verdade. Veio o maldito conector de 30 pinos, e agora o Lightning. Porém um dos lados é USB (tipo-A), o que nos permite encaixar em virtualmente qualquer computador.</p><p>Ao fazer isso, a Apple escolheu o público — e o dinheiro — a tecnologia. O FireWire era<strong> realmente melhor</strong> do que o USB da época. Mas ficar fechado no ecossistema da Apple não fazia sentido pra o iPod ficar popular.</p><p>Mudar isso foi o primeiro passo. O segundo vem a seguir.</p><h4 id="Nao-havia-iTunes-para-Windows"><a href="#Nao-havia-iTunes-para-Windows" class="headerlink" title="Não havia iTunes para Windows"></a>Não havia iTunes para Windows</h4><p>Sim. Além de não ter conexão USB, os iPods só podiam fazer Sync (lembra disso, Sync? coisa paleolítica em tempos de Nuvem) com Macs. Ou seja, vender um iPod como <em>primeiro device</em> Apple para alguém era um desafio e tanto, já que você precisava convencer a pessoa comprar o iPod e levar um computador junto.</p><p>Em 2003, a Apple lança o iTunes para Windows. E pedante e arrogante como sempre foi, <a href="https://www.youtube.com/watch?v=sI7PKDdxWXY" target="_blank" rel="external">ela anunciou assim</a>:</p><figure><img src="https://cdn-images-1.medium.com/max/696/1*adFntyGTWMDC_8ZGdCEAsw.jpeg" alt=""><figcaption>Sim, eles usam a nomenclatura “app” desde 2003. Isso nasceu com o iPhone não.</figcaption></figure><p>O Inferno congelou. E a Apple começou a fazer casacos com notas de Dólar.</p><h2 id="em-2016-16-de-setembro"><a href="#em-2016-16-de-setembro" class="headerlink" title="em 2016, 16 de setembro"></a>em 2016, 16 de setembro</h2><p>Em 16 de setembro os primeiros iPhones estarão nas mãos dos compradores. Não existe essa de “não vai vender”. Vai, feito água. Sinto informar mas ninguém que quer um iPhone 7 vai deixar de comprar o iPhone 7 porque não há uma entrada de fone de ouvido. E a Apple sabe disso.</p><p>A questão é o que acontece daqui pra frente. E vou explicar o porquê de crer que a Apple está com uma “estratégia” errada. Quantos MBAs eu tenho pra falar de estratégia de negócios?</p><p>Nenhum. Mas eu sou usuário, mais importante que isso.</p><h3 id="Nao-vai-dar-certo-Kinda"><a href="#Nao-vai-dar-certo-Kinda" class="headerlink" title="Não vai dar certo. Kinda."></a>Não vai dar certo. Kinda.</h3><p>A Apple está fazendo uma aposta. Como ela sabe que é a primeira vez, ela tem o benefício da dúvida, e um caminhão de dinheiro pra sustentar essa brincadeira. Se der errado, o P2 volta no iPhone 7S e isso nunca aconteceu e a Oceania sempre esteve em guerra com a Eurásia. Ponto final.</p><p>A Apple apostar dessa maneira faz sentido pelo seu próprio histórico, o qual desenvolvi até agora. Ela realmente sempre foi vanguardista, e tinha a visão do que era melhor para seu consumidor, e que estava disposta a fazer mudanças radicais se preciso fosse. Isso foi verdade no iMac, no iPod e no MacBook Air.</p><p>Porém o que a Apple agora está fazendo é apenas jogar sujo.</p><p>Ao trocar o P2 pelo Lighting, e ter a pachorra de dizer que está sendo corajosa ao fazer isso, a única coisa que a Apple está fazendo é <strong>manter seu usuário dentro do seu castelo</strong>.</p><p>Tudo no ecossistema da Apple é feito para te manter dentro dele (veja bem, não estou dizendo que isso é <em>errado</em>, cada cachorro que lamba sua caceta), quantas pessoas que você não deve conhecer que não trocam de iOS não porque não tem vontade, mas porque já gastou fortunas na App Store? Ou por que todos os seus periféricos se conectam via Lightning, que também custaram fortunas?</p><h4 id="O-inimigo-errado"><a href="#O-inimigo-errado" class="headerlink" title="O inimigo errado."></a>O inimigo errado.</h4><p>Lembra daquela vez que seu amigo reclamou de estava usando um conetor P2? Pois é, <strong>eu também não</strong>.</p><p>A <em>unfair advantage</em> do P2 é seu alcance. <strong>TODO MUNDO</strong> tem um fone com conexão P2… porquê bem… eles estão aí desde sempre. Além de que ele é virtualmente utilizado em todos os equipamentos de áudio que existem. O iPhone 7 é incompatível com 99,99% de todos os <em>headphones</em> já feitos.</p><p>Além de isso os headphones Lightning não são compatíveis com mais nada além dos iDevices. Porra, Apple, os fones Lightning não funcionam NEM COM OS <strong>SEUS </strong>COMPUTADORES!</p><p>E existe um “problema” muito maior com o P2: eles são<em> bons o suficiente</em>. E quando em determinada tecnologia chegamos em algo bom o suficiente, por tanto tempo, é que tentar evoluir algo assim é totalmente inefetivo. Vender então, é quase impossível.</p><p>Não existe nenhum motivo razoável pra matar o P2 justamente porquê está tudo ótimo da maneira que está. Não há melhorias efetivas que justifiquem qualquer mudança, a não ser masturbação inovativa quando seu relógio novo não vende.</p><p>Mas trocar o P2 nem é problema. <strong>O problema é não combinar com os Russos.</strong></p><h4 id="Como-fazer-dar-certo"><a href="#Como-fazer-dar-certo" class="headerlink" title="Como fazer dar certo"></a>Como fazer dar certo</h4><p>Tem como guerras acabarem bem, o problema é que isso é tão raro (e difícil) que sequer é lembrado: se unir ao inimigo.</p><p>Tendo uma visão bem fria e analítica, a soma zero do P2 é vantajosa: uma conexão a menos para se preocupar. O problema é quando <strong>só você</strong> tem aquela conexão, e você também não tem nem de perto o alcance do seu inimigo, já que mata-lo não é apenas escolha sua.</p><p>Então se a Apple quer mesmo matar o P2, eu imagino três saídas que funcionariam. A bronca é que nenhuma delas é de fato boa pra Apple, com o ego que tem. Talvez não seja a toa que eles escolheram essa estratégia, no fim das contas, né?</p><h3 id="Vamos-matar-o-P2"><a href="#Vamos-matar-o-P2" class="headerlink" title="Vamos matar o P2"></a>Vamos matar o P2</h3><h4 id="Bluetooth-e-bom-Bluetooth-e-vida-use-Bluetooth"><a href="#Bluetooth-e-bom-Bluetooth-e-vida-use-Bluetooth" class="headerlink" title="Bluetooth é bom Bluetooth é vida use Bluetooth"></a>Bluetooth é bom Bluetooth é vida use Bluetooth</h4><p>Fones Bluetooth não são melhores do que fones P2. Triste realidade. Porém eles estão cada vez mais próximos de ficarem bons o bastante. Se a Apple direcionar o seu público a usar Bluetooth, cai por terra a bronca de os fones não serem “multiplataforma”.</p><p>A Apple tem mais espaço (físico, mesmo) pra inovar no iPhone sem ter que por o P2, como eles mesmo dizem, e ainda talvez sobre pra Beats — a qual a Apple é dona — perder o status de marca de gente rica que não sabe comprar fones de qualidade pra ser vanguardista na criação de fones de primeira linha, sem fio.</p><p>Os problemas para Apple são: ela não está mantendo ninguem na plataforma dela (que é o real motivo dessa palhaçada toda) promovendo o Bluetooth, padrão aberto que <strong>não é melhor</strong> que o P2. Então andar pra trás, ainda que só um pouquinho, não tende a ser opção.</p><h4 id="Libera-o-Lightning-pra-geral"><a href="#Libera-o-Lightning-pra-geral" class="headerlink" title="Libera o Lightning pra geral"></a>Libera o Lightning pra geral</h4><p>Esse seria o cenário mais dahora e o mais difícil de acontecer.</p><p>A Apple bate o pé e diz que tem que ser usando Lightning mesmo por que só o Lightning é o Lightning e deus quis assim. E ainda diz que quem tiver achando ruim, o Lightning está liberado pra usar no seu dispositivo.</p><p>Sim, eu sei, pra quem faz produtos “Made for i” o Lightning está liberado. Mas seria liberar VALENDO: se a Samsung quiser usar o Lightning de conector no celular dela, ela poderia.</p><p>Isso seria lindo, pois realmente ia ser a corrida do ouro dos conectores. Não tem uma dessas desde o HD DVD e o BlueRay.</p><p>Porém, a gente sabe que é quase impossível da Apple fazer isso. O Lightning é dela e ela usa ele por que ela pode mexer nele como bem entender, sem depender de seu ninguém. Se amanhã ela quiser inventar um pitoco novo, problema dela, segue normal.</p><h4 id="Se-rende-ao-USB-C"><a href="#Se-rende-ao-USB-C" class="headerlink" title="Se rende ao USB-C"></a>Se rende ao USB-C</h4><p>Esse seria o melhor cenário. Todo mundo lembra que tá no mesmo barco, se junta e mata o P2 fingindo que é amigo. A Apple tira o Lightning, bota o USB-C no lugar e viveremos num mundo onde todas as pessoas do planeta iriam ter os mesmos cabos pra carregar e ouvir música, e poder pegar emprestado de terceiros sempre que pudesse, com a certeza que seu coleguinha teria.</p><p>Finalmente a pergunta “alguém tem cabo pra carregar iPhone?” iria morrer. Se pá, até a União Européia ia sossegar o rabo um pouco pra cima da Apple.</p><p>Mas pelos motivos citados acima, a gente sabe que, infelizmente, a Apple também não vai fazer isso. <strong>Porém, </strong>esse é o futuro que eu acho que vai acontecer, nem que seja via adaptador a um primeiro momento.</p><h3 id="Por-que"><a href="#Por-que" class="headerlink" title="Por quê?"></a>Por quê?</h3><p>O <strong>Moto Z da Lenovo</strong> não tem entrada P2. Sim, a Apple nunca é a <strong>primeira meeeesmo</strong>, nem quando faz merda.</p><p>Agora veja a situação. Como eu disse, de fato há uma batalha (sem motivo, o P2 é bom o bastante) de quem vai inovar primeiro na maneira com que consumimos música e ao mesmo tempo temos que ter telefones finos feito papel (outra coisa sem motivo).</p><p>Agora se coloque no lugar de quem faz headphones. Você tem a Apple, que força o seu padrão. Os Androids irão começar a forçar o USB-C (anote e me cobre). O que você faz? Produz pra qual dos dois “padrões”?</p><p>Isso mesmo, você não faz nada. Afinal, vem adaptador na caixa. E há um padrão.</p><p>E aí que a parte divertida vai começar. Pois em dado momento, o usuário vai se cansar de ficar usando adaptador pra lá e pra cá, e um dos dois conectores vai ter que vencer. <strong>É inevitável.</strong></p><h3 id="Ou-a-gente-pode-nao-matar-o-P2-Mas-qual-seria-a-graca-certo"><a href="#Ou-a-gente-pode-nao-matar-o-P2-Mas-qual-seria-a-graca-certo" class="headerlink" title="Ou a gente pode não matar o P2. Mas qual seria a graça, certo?"></a><strong>Ou a gente pode não matar o P2. Mas qual seria a graça, certo?</strong></h3><p>E eu já ouvi histórias que o inferno congelou uma vez. <em>E olha que eu nem falei daquela vez que a </em><a href="https://www.youtube.com/watch?v=ghdTqnYnFyg" target="_blank" rel="external"><em>Apple mudou de PowerPC pra Intel</em></a>.</p><figure><img src="https://cdn-images-1.medium.com/max/620/1*kKgVIPFZkIGMl3s2LuChTw.png" alt=""><img src="https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=62e11934d172" alt=""></figure>]]></content:encoded>
      
      <comments>https://joseli.to/eu-acho-que-a-apple-dessa-vez-ta-errada/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Seu Web App offline mais rápido que preparo de Miojo</title>
      <link>https://joseli.to/seu-web-app-offline-mais-rapido-que-preparo-de-miojo/</link>
      <guid>https://joseli.to/seu-web-app-offline-mais-rapido-que-preparo-de-miojo/</guid>
      <pubDate>Sat, 03 Sep 2016 01:11:55 GMT</pubDate>
      <description>
      
        &lt;h4 id=&quot;Codigo-pronto-em-tres-minutos-ou-seu-dinheiro-de-de-volta&quot;&gt;&lt;a href=&quot;#Codigo-pronto-em-tres-minutos-ou-seu-dinheiro-de-de-volta&quot; clas
      
      </description>
      
      <content:encoded><![CDATA[<h4 id="Codigo-pronto-em-tres-minutos-ou-seu-dinheiro-de-de-volta"><a href="#Codigo-pronto-em-tres-minutos-ou-seu-dinheiro-de-de-volta" class="headerlink" title="Código pronto em três minutos ou seu dinheiro de de volta"></a>Código pronto em três minutos ou seu dinheiro de de volta</h4><figure><img src="https://cdn-images-1.medium.com/max/1024/0*dMnWSvjPx2RMGpPm.jpg" alt=""></figure><p>Quando você pensa que não, 2016 já está perto de chegar ao fim. Isso só é um indicador a mais que já passou da hora de fazer com que seu web app funcione offline.</p><p>Sim, eu sei, os <strong>ServiceWorkers</strong>, apesar de não parecer tão terríveis quanto eram antigamente ainda parecem muito complicados de usar. Principalmente por que o código (e a maneira com que ele funciona) é muito diferente do “normal” que estamos acostumados.</p><p>No início do ano eu fiz um Hangout com o GDG Belo Horizonte sobre como usar ServiceWorkers. A palestra tá no meu canal, e você pode ver abaixo. Acho que é o único conteúdo sobre isso em Português no YouTube, então vale o seu like.</p><p>Porém, ainda sim, usar <strong>ServiceWorkers </strong>sem exemplos mais claros ainda não é das tarefas mais fáceis. Seria ótimo se, sei lá, tivéssemos algum repositório com uma série de exemplos, que a gente pudesse ao menos <em>c̶o̶p̶i̶a̶r̶ ̶e̶ ̶c̶o̶l̶a̶r̶</em> olhar e entender melhor como funciona.</p><figure><img src="https://cdn-images-1.medium.com/max/1024/1*RN4fR6p_sKrw0SZ0NGuC8w.png" alt=""><figcaption>Avisa a Ludmila que tem repo sim</figcaption></figure><p>O time do Google Chrome tem o <a href="https://github.com/GoogleChrome/samples/tree/gh-pages/service-worker" target="_blank" rel="external"><strong>GoogleChrome/samples</strong> na rede social de códigos GitHu</a>b, com diversos exemplos excelentes de como usar ServiceWorkers para armazenar o <strong>conteúdo offline</strong>.</p><p>Alguns exemplos da lista são:</p><ul><li><a href="https://googlechrome.github.io/samples/service-worker/basic/index.html" target="_blank" rel="external"><strong><em>Basic Demo</em></strong></a>, que mostra o básico do básico de implementaçao de SW em uma página. Como é o básico do básico, é justamente o melhor lugar pra começar se você nunca fez algo parecido.</li><li><a href="https://googlechrome.github.io/samples/service-worker/registration-events/index.html" target="_blank" rel="external"><strong><em>Detailed Registration</em></strong></a>, que já é alguns passos a frente, e você aprende como registrar um SW na sua página, além de receber informações detalhadas do SW, como os seus estados e versões.</li><li><a href="https://googlechrome.github.io/samples/service-worker/multiple-handlers/index.html" target="_blank" rel="external"><strong><em>Multiple fetch handlers</em></strong></a>, onde você pode ter mais noções de como os SW funcionam como uma espécie de proxy, entre seu servidor e o navegador</li><li><a href="https://googlechrome.github.io/samples/service-worker/custom-offline-page/index.html" target="_blank" rel="external"><strong><em>Custom offline page</em></strong></a>, exemplo mais básico de offline (usando de base as “etapas” acima citadas), onde um simples <em>fallback</em> é exibido ao usuário, caso ele esteja sem conexão.</li></ul><p>E por aí vai. O legal do repositório é que os códigos são os mais auto-contidos o possível, então é praticamente fazer um <em>plug’n’play</em> no código da sua própria aplicação.</p><p>ServiceWorkers são úteis para dois pilares importantes de<strong> Progressive Web Apps</strong>: as <strong>notificações</strong> e o <strong>acesso offline</strong>. Aguarde cenas dos próximos capítulos.</p>]]></content:encoded>
      
      <comments>https://joseli.to/seu-web-app-offline-mais-rapido-que-preparo-de-miojo/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Gerando SSL grátis pra qualquer site. Sem tocar na linha de comando.</title>
      <link>https://joseli.to/gerando-ssl-gratis-pra-qualquer-site-sem-tocar-na-linha-de-comando/</link>
      <guid>https://joseli.to/gerando-ssl-gratis-pra-qualquer-site-sem-tocar-na-linha-de-comando/</guid>
      <pubDate>Thu, 18 Aug 2016 23:33:21 GMT</pubDate>
      <description>
      
        &lt;figure&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/1024/1*wvgOxnmzg6h8IZjIIOBaOQ.png&quot; alt=&quot;&quot;&gt;&lt;/figure&gt;&lt;h4 id=&quot;Nao-tem-mais-desculpa-Vamos
      
      </description>
      
      <content:encoded><![CDATA[<figure><img src="https://cdn-images-1.medium.com/max/1024/1*wvgOxnmzg6h8IZjIIOBaOQ.png" alt=""></figure><h4 id="Nao-tem-mais-desculpa-Vamos-encriptar-tudo"><a href="#Nao-tem-mais-desculpa-Vamos-encriptar-tudo" class="headerlink" title="Não tem mais desculpa. Vamos encriptar tudo."></a>Não tem mais desculpa. Vamos encriptar tudo.</h4><p>Eu já falei sobre HTTPS/SSL <a href="https://codigo.joselito.space/seus-sites-seguros-de-gra%C3%A7a-sem-custo-nenhum-e-n%C3%A3o-pagando-nada-49df4694bd85?source=latest" target="_blank" rel="external">não uma</a>, mais <a href="https://codigo.joselito.space/http-s2-addenda-175e8b64b184?source=latest" target="_blank" rel="external">duas vezes</a> aqui no blog. E não vou cansar de falar até eu ver todos os sites com um cadeadinho na barra de navegação.</p><p>O post de hoje vem resolver todos os problemas e calar todas as desculpas. Nunca foi tão fácil gerar e instalar SSL feito agora. E aprenderemos passo-a-passo como fazer isso. No tutorial de hoje usaremos o <a href="http://letsencrypt.com" target="_blank" rel="external">Let’s Encrypt</a>, já mencionado em posts anteriores.</p><p>Além disso, tem uma novidade: se você gosta de vídeo-tutoriais, é só dar play abaixo e ver seguir os passos do vídeo. Se você prefere texto, tudo bem, basta seguir em frente sem olhar para o lado. <em>Mas cuidado com o mestiço.</em></p><h4 id="Primeira-Etapa"><a href="#Primeira-Etapa" class="headerlink" title="Primeira Etapa"></a>Primeira Etapa</h4><p>Acesse o site <a href="https://zerossl.com" target="_blank" rel="external">https://zerossl.com</a>. Quando ele carregar, clique no botão <strong>Online Tools</strong>, e depois, clique em <strong>Start</strong>, na seção <em>“FREE SSL Certificate Wizard”</em></p><figure><img src="https://cdn-images-1.medium.com/max/840/1*wv8CyZeLpu6IQRpVQXP3yQ.png" alt=""></figure><h4 id="Segunda-Etapa-O-Mago"><a href="#Segunda-Etapa-O-Mago" class="headerlink" title="Segunda Etapa: O Mago"></a>Segunda Etapa: O Mago</h4><p>Encontramos o form que fará todo o trabalho pra gente na requisição de um SSL para o Let’s Encrypt. Vamos com carinho e dedicação preencher cada etapa, sem pular nada.</p><p><strong>#0:</strong> Preencha o domínio ou subdomínio que você quer instalar um certificado SSL. Confirme que aceita os termos de uso e clique em <strong>Next</strong>.</p><figure><img src="https://cdn-images-1.medium.com/max/1024/1*0OT1XZRw-PecB-8gvJo2PQ.png" alt=""><figcaption>Sua tela deve estar mais ou menos assim. Não peencha nenhum outro campo!</figcaption></figure><p>Após isso, ele irá exibir uma mensagem questionando se você deseja que a versão prefixada com <strong><em>www </em></strong>seja adicionada a requisição do certificado. Isso é bem útil se você está instalando num domínio completo. Selecione o que for melhor para o seu caso.</p><p>Você verá uma mensagem de que ele está gerando a requisição. Aguarde, pois demora um pouco as vezes. Ao estar concluído, repare que o campo de domínio <strong>ficou vazio</strong> e o _textarea _abaixo dele ficou <strong>preenchida</strong>. Isso significa que a chave de requisição do seu domínio foi criada. Baixe ela e guarde num lugar seco sem odor.</p><p><strong>#1: </strong>Sem mudar nada, aperte <strong>Next </strong>novamente. Estamos “repetindo” um passo, mas a grande diferença é que agora estamos utilizando uma chave devida pra isso. Nessa etapa estaremos gerando a <strong>account key</strong>. Ambas essas chaves são importantes para a validação e principalmente a renovação do certificado, já que os certificados do Let’s Encrypt são validos por apenas 90 dias (mas são renováveis indefinidamente).</p><p>Depois de gerar a account key, as sua tela deve estar semelhante ao screenshot a seguir:</p><figure><img src="https://cdn-images-1.medium.com/max/1024/1*-HMuRTNUhlojU9o9pnQMxw.png" alt=""><figcaption>Lembre sempre de baixar as chaves</figcaption></figure><p>Depois disso, é só apertar em <strong>Next </strong>e ir pra etapa de verificação.</p><h4 id="Verificando-se-o-seu-site-e-seu-mesmo"><a href="#Verificando-se-o-seu-site-e-seu-mesmo" class="headerlink" title="Verificando se o seu site é seu mesmo"></a>Verificando se o seu site é seu mesmo</h4><p>Pra você instalar o certificado em um site, o Let’s Encrypt precisa ter certeza que ele é seu mesmo. Convenhamos, é uma dúvida razoável. Além de evitar que a galera peça certificado a torto e a direito a seu bel prazer.</p><p>O jeito que a galera da <strong>ZeroSSL </strong>usou pra fazer isso foi bem interessante. Você tem que criar um arquivo específico, numa pasta específica do seu subdomínio, com um conteúdo específico. Ele vai dar _match _nisso tudo e, funcionando, a identidade do site está confirmada. É mais ou menos parecido quando você vai verificar um site com o Google, a qual você sobe um arquivo _html _no seu servidor.</p><p>A tela de verificação é semelhante ao screenshot a seguir:</p><figure><img src="https://cdn-images-1.medium.com/max/1024/1*_DngVfCRHuB2SNdideFvUQ.png" alt=""></figure><p>Observe que todas as informações estão claras. No caso, temos que criar um arquivo texto (sem extensão) com o nome descrito abaixo de File, o conteúdo sendo a string depois de Text e a pasta em si sendo <strong>/.well-known/acme-challenge/</strong>. Tudo bem explicadinho pelo site do ZeroSSL.</p><p>Meia duzia de CTRL+C/V depois você tá pronto pra correr pro abraço. Após enviar o arquivo pro seu servidor, aperte novamente em <strong>Next</strong>.</p><h4 id="OEAAAAAA"><a href="#OEAAAAAA" class="headerlink" title="OEAAAAAA"></a>OEAAAAAA</h4><p>Se você chegou a página de confirmação, meus parabéns! Seu certificado (composto de dois arquivos) estará lá em baixo. Basta baixar ambos e instalar no seu servidor.</p><figure><img src="https://cdn-images-1.medium.com/max/1024/1*GfizcFKmvcxxUhBearC1Dg.png" alt=""><figcaption>A fantástica tela final (tm)</figcaption></figure><p>Como você instala no seu servidor, aí ja é outra história, e outro post… Cada caso é um caso. Pode me <a href="http://twitter.com/joselitojunior1" target="_blank" rel="external">perguntar no Twitter</a>, se eu manjar eu te ajudo.</p><p>Livin’ la vida Encrypted.</p>]]></content:encoded>
      
      <comments>https://joseli.to/gerando-ssl-gratis-pra-qualquer-site-sem-tocar-na-linha-de-comando/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Usando bibliotecas externas com TypeScript</title>
      <link>https://joseli.to/usando-bibliotecas-externas-com-typescript/</link>
      <guid>https://joseli.to/usando-bibliotecas-externas-com-typescript/</guid>
      <pubDate>Thu, 11 Aug 2016 23:08:25 GMT</pubDate>
      <description>
      
        &lt;h4 id=&quot;A-dica-de-hoje-e-curtinha-mais-bem-importante-pra-voce-que-esta-iniciando-seus-trabalhos-com-Angular-2-principalmente-Ionic-2-e-Type
      
      </description>
      
      <content:encoded><![CDATA[<h4 id="A-dica-de-hoje-e-curtinha-mais-bem-importante-pra-voce-que-esta-iniciando-seus-trabalhos-com-Angular-2-principalmente-Ionic-2-e-TypeScript"><a href="#A-dica-de-hoje-e-curtinha-mais-bem-importante-pra-voce-que-esta-iniciando-seus-trabalhos-com-Angular-2-principalmente-Ionic-2-e-TypeScript" class="headerlink" title="A dica de hoje é curtinha mais bem importante pra você que está iniciando seus trabalhos com Angular 2 (principalmente Ionic 2) e TypeScript."></a>A dica de hoje é curtinha mais bem importante pra você que está iniciando seus trabalhos com Angular 2 (principalmente Ionic 2) e TypeScript.</h4><figure><img src="https://cdn-images-1.medium.com/max/1024/0*YH3_xSZkvGlxv8Ef.jpg" alt=""></figure><p>O JavaScript sempre foi o Luquita da Galera quando falamos de tipos. Sempre ouvimos que qual quer coisa é um <em>Object — </em><a href="http://www.2ality.com/2011/03/javascript-values-not-everything-is.html" target="_blank" rel="external">ou quase qualquer coisa</a>. Como tudo na vida, isso tem seu lado bom e seu lado ruim (tirando sorvete, que é a exceção que prova a regra).</p><p>No post, vou usar de base a criação de um projeto no <strong>Ionic 2</strong>. Mas o princípio é exatamente o mesmo usando o <strong>Angular-CLI</strong> ou algum outro _starter _que você anda usando por aí, já que em todos temos em comum o gerenciamento de pacotes via <strong>NPM</strong>.</p><p>Vamos criar um projeto e instalar, por exemplo, o <strong>AngularFire 2</strong>, já atualizado para o Angular 2 (com TypeScript). Também vamos instalar o SDK do <strong>Firebase</strong>, que é dependência do AngularFire:</p><p>Já inicializamos nosso<em> App Incrível</em>, agora vamos começar a trabalhar no nele.</p><p>O código de uma página (ou uma View) do Ionic 2 é uma coisa mais ou menos assim (afinal, ela nada mais é que um <em>Component</em>):</p><p>Agora vamos importar as bibliotecas que instalamos lá no início do projeto. Adicionamos algumas coisas no cabeçalho do código…</p><p>aí é só definir algumas variáveis ne inicialização, e então nós já podemos compilar e tes…</p><pre>**[ts]** Cannot find module 'angularfire2'.</pre><figure>![](https://cdn-images-1.medium.com/max/480/1*-amSAnpCo3HL09lv_Yh24A.jpeg)<figcaption>Ué?</figcaption></figure>Aí no meio do caminho aparece uma daquelas pedras que faz você se questionar sobre toda sua carreira de desenvolvedor. _Céus, como assim o módulo não foi encontrado? Eu tenho certeza eu executei o comando de instalação. Será que eu executei mesmo? Sera que o npm tá funcionando? Qual o sentido da vida?_ Calma, tá tudo bem. Se fosse um** ES6/7** da vida já estaríamos rodando tudo sem maiores problemas. Mas estamos usando **TypeScript**, então temos certos compromissos com os **tipos**. O TypeScript analisa seu código, fazendo type checking. E se você está utilizando um projeto externo, o qual os tipos não são primários nem compatíveis com os quais você criou, precisamos instalar as definições de tipos daquela biblioteca para que o TypeScript interprete seu código devidamente. É ai que entra em cena o [**Typings**](https://www.npmjs.com/package/typings). O Typings instala definições (arquivos_ .d.ts_) de bibliotecas externas e as instala no seu projeto. Para tal, primeiramente devemos instalar globalmente o Typings no nosso sistema:<pre>$ npm install -g typings</pre><p>Após isso, devemos instalar as definições do AngularFire, que — por coincidência — a equipe cheirosa do Firebase disponibilizou <a href="https://firebase.google.com/support/release-notes/js#wzxhzdk4version_321_-_july_26_2016wzxhzdk5" target="_blank" rel="external">junto do SDK</a> no último release.</p><pre>$ **typings **install file:node_modules/angularfire2/firebase3.d.ts --save --global &amp;&amp; **typings **install</pre><p>Depois disso, é só correr pro abraço. Projeto compilando e funcionado. E sem usar <strong><em>:any</em></strong>.</p><h4 id="Mas-e-se-a-gente-quiser-ir-alem"><a href="#Mas-e-se-a-gente-quiser-ir-alem" class="headerlink" title="Mas, e se a gente quiser ir além?"></a>Mas, e se a gente quiser ir além?</h4><p>Ok ok, tudo isso funciona muito bem quando eu estou gerenciando minhas libs via NPM. Mas, e quando eu não tenho NPM? <em>Como faço pra usar jQuery??</em></p><p>Primeiramente, parabéns pela ousadia de querer usar jQuery com TypeScript. Mas continuando, sim, é possível. O jQuery até tem um repositório oficial no NPM, então vamos usar um exemplo melhor (e porque não dizer mais real) com a <a href="https://developers.google.com/maps/web/?hl=pt-br" target="_blank" rel="external">API do Google Maps</a>.</p><p>Há um wrapper da API no NPM, mas vamos no roots. Vai que o Google resolve mudar tudo amanhã?</p><p>Para tal, apresento-lhe o <a href="http://definitelytyped.org/" target="_blank" rel="external"><strong>DefinitelyTyped</strong></a>, que é um <a href="https://github.com/DefinitelyTyped/DefinitelyTyped" target="_blank" rel="external">repositório </a>estupidamente grande de definições para bibliotecas que não possuem definições.</p><figure><img src="https://cdn-images-1.medium.com/max/1003/1*E_QCCxZ3yRoGFEGbdLPHSA.png" alt=""></figure><p>Para instalar um repositorio do DT no seu projeto, é o mesmo comando do Typings:</p><pre>$ **typings **install dt~google-maps --global
// o dt~ serve pra explicitar que estamos baixando do repositório do DefinitelyTyped</pre><p>Prontinho! Agora o TypeScript vai reconhecer tranquilamente todas as chamadas da API de JavaScript do Google Maps.</p><p>Um viva a vida sem erros de tipo!</p>]]></content:encoded>
      
      <comments>https://joseli.to/usando-bibliotecas-externas-com-typescript/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Recebendo e Enviando e-mails do GoDaddy via Gmail — de graça.</title>
      <link>https://joseli.to/recebendo-e-enviando-e-mails-do-godaddy-via-gmail-%E2%80%94-de-graca/</link>
      <guid>https://joseli.to/recebendo-e-enviando-e-mails-do-godaddy-via-gmail-%E2%80%94-de-graca/</guid>
      <pubDate>Thu, 04 Aug 2016 04:21:09 GMT</pubDate>
      <description>
      
        &lt;h4 id=&quot;Pagar-Google-Apps-so-pra-fazer-um-e-mail-de-contato-Nao-mais&quot;&gt;&lt;a href=&quot;#Pagar-Google-Apps-so-pra-fazer-um-e-mail-de-contato-Nao-mais
      
      </description>
      
      <content:encoded><![CDATA[<h4 id="Pagar-Google-Apps-so-pra-fazer-um-e-mail-de-contato-Nao-mais"><a href="#Pagar-Google-Apps-so-pra-fazer-um-e-mail-de-contato-Nao-mais" class="headerlink" title="Pagar Google Apps só pra fazer um e-mail de contato? Não mais."></a>Pagar Google Apps só pra fazer um e-mail de contato? Não mais.</h4><figure><img src="https://cdn-images-1.medium.com/max/600/1*7BqV_E3zmJEt86bHN9K9Ig.jpeg" alt=""><figcaption>VaiPapai™</figcaption></figure><p>Comprar domínios é um esporte radical, o qual pratico assiduamente e batalho para que se torne olímpico para as olimpíadas de Tokyo 2020.</p><p>E quando você adquire um domínio, uma das coisas mais legais a se fazer é configurar um e-mail pra ele. Nem que seja um de contato, pra fazer aquele bolado.</p><p>Comprando seu domínio no GoDaddy (que não tá patrocinando o post, <a href="mailto:eu+paganois@joselitojunior.com" target="_blank" rel="external">mas poderia</a>) você pode pagar para ter um e-mail corporativo, usando a própria solução do GoDaddy, ou você pode configurar alguma externa, como o <a href="http://google.com/a/" target="_blank" rel="external">Google Apps for Domains</a>. Já na parte gratuita, você tem duas opções: hospedar você mesmo seu servidor de e-mail (o que tecnicamente nem é gratuito, já que você tá pagando o hosting) ou usar os famigerados <strong>E-mails de Redirecionamento</strong>, esse de graça mesmo.</p><p>Os e-mails de redirecionamento, como o nome já denuncia, precisam de um outro e-mail de destino, como por exemplo um <strong>Gmail</strong>. Todos e-mails recebidos pelo e-mail de redirecionamento são encaminhados diretamente para sua caixa de entrada do e-mail de destino. A parte triste é que a outra via não funciona: você não consegue mandar e-mails por contas de redirecionamento. Só receber e automaticamente encaminhar.</p><p><strong>Bem, _teoricamente _você não consegue.</strong></p><p>Usando bastante paciência e a funcionalidade de _Alias _que o Gmail possui, iremos configurar um e-mail de redirecionamento para receber <strong>e enviar</strong> e-mails via uma conta do Gmail.</p><p>Separe sua próxima hora para invocar esse espírito.</p><h4 id="Parte-0-O-basico"><a href="#Parte-0-O-basico" class="headerlink" title="Parte 0: O básico"></a>Parte 0: O básico</h4><p>A parte 0 é o mínimo que você precisa fazer. Ela é bem básica — e de certa forma, óbvia — para fazer tudo funcionar. Você vai precisar:</p><ul><li>1 conta do Gmail</li><li>1 domínio no GoDaddy, com o redirecionamento de e-mail configurado</li><li>1 Personal Computer ou Macintosh. Não dá pra fazer do celular.</li><li>1 Long Neck de Heineken (recomendado)</li></ul><p>Configurar o redirecionamento é o trivial, feito pelo painel de controle do GoDaddy. Por lá você vai dizer qual o e-mail <strong><em>meuemail@meudominio.xyz</em></strong> redirecionará para <strong><em>meugmail@gmail.com</em></strong>_. _Após configurar, espere um pouco e teste para ter certeza que o redirecionamento está funcionando.</p><p>Após estar tudo testado, siga em frente e olhe para o lado.</p><h4 id="Parte-1-A-seguranca"><a href="#Parte-1-A-seguranca" class="headerlink" title="Parte 1: A segurança"></a>Parte 1: A segurança</h4><p>Se você usa <a href="https://www.google.com.br/landing/2step/" target="_blank" rel="external">autenticação de duas etapas</a>, você não vai sofrer tanto para essa primeira parte. Se não, bem. Você vai ter que se acostumar.</p><p><strong>#0:</strong> Você <strong>precisa </strong>da autenticação de duas etapas ativa na sua conta Google para o método que estamos usando, pois precisamos criar uma<strong> senha de aplicativo</strong> específica para seu Gmail. E essa opção só é habilitada na sua conta quando a autenticação de dois fatores está devidamente configurada.</p><p>Se você ainda não tem 2FA ativo, pare de ler agora, <a href="https://accounts.google.com/SmsAuthConfig" target="_blank" rel="external">clique aqui</a> e configure para sua conta Google. Se você já tem, continue lendo.</p><p>#1: Vá no painel da sua conta Google (<a href="https://myaccount.google.com" target="_blank" rel="external">https://myaccount.google.com</a>) e clique em “<strong>Login e segurança</strong>”:</p><figure><img src="https://cdn-images-1.medium.com/max/374/1*T7dUmLcMY0npWqmDjFGpLg.png" alt=""></figure><p><strong>#2:</strong> Procure por “<strong>Senhas de app</strong>” na seção “<strong>Como fazer login no Google</strong>”, e clique nele:</p><figure><img src="https://cdn-images-1.medium.com/max/591/1*8fIun_2qgLiwmiSqKGVewQ.png" alt=""></figure><p>O Google vai pedir sua senha, informe e continue.</p><p><strong>#3:</strong> Na parte em baixo do box dessa nova página, clique em “Selecionar app” e depois, clique em “Outros”:</p><figure><img src="https://cdn-images-1.medium.com/max/487/1*Fqc7m2IfJ78IxpSva4vksA.png" alt=""></figure><p>Após clicar, preencha com um nome. Ele serve apenas de referência, não precisa ser um nome em específico. Após definir o nome, clique em <strong>Gerar</strong>.</p><figure><img src="https://cdn-images-1.medium.com/max/439/1*ypt3AVSwNdYrJiAnxrVU5A.png" alt=""></figure><p>_So far, so good. _Irá aparecer uma janelinha com uma senha de 16 caracteres. <strong>Anote ela</strong> que vamos precisar dela em breve.</p><figure><img src="https://cdn-images-1.medium.com/max/642/1*cd5sOGuNyDjx6NzDwThTug.png" alt=""><figcaption>Nem tenta, jovem. Já revoguei essa senha.</figcaption></figure><p>Parabéns padawan. Cumprimos a primeira etapa. Vamos pro castelo que está a princesa.</p><h4 id="Parte-2-Escadaria-da-configuracao"><a href="#Parte-2-Escadaria-da-configuracao" class="headerlink" title="Parte 2: Escadaria da configuração"></a>Parte 2: Escadaria da configuração</h4><p><strong>#0</strong>: Entre no seu Gmail e vá em <strong>Configurações &gt; Contas e Importação</strong> e aperte em “<strong>Adicionar outro endereço de e-mail que você possui</strong>”</p><figure><img src="https://cdn-images-1.medium.com/max/945/1*jzgcVGaWHhWOF4BXmrDbCg.png" alt=""></figure><p><strong>#1:</strong> Bem-vindo a 2007! Com esse<strong><em> POP-UP (!!!)</em></strong> maravilhoso que acaba de abrir, iremos começar a configurar de verdade nosso e-mail. Todo cuidado, carinho e atenção é importante agora.</p><figure><img src="https://cdn-images-1.medium.com/max/516/1*7WojnLdnEMudYe13VdCWIA.png" alt=""><figcaption>Essa feature, apesar de relativamente desconhecida, existe desde sempre no Gmail. Acho que nunca atualizaram.</figcaption></figure><p>Preencha os campos como indicado:</p><ul><li>Coloque o nome da conta. No meu caso, por exemplo, é “Joselito Júnior” mesmo. Esse nome é o que aparece no envio/recebimento de e-mails.</li><li>Coloque o<strong> e-mail de redirecionamento</strong>. O do <strong>seu domínio</strong>.</li></ul><p>Se você está seguro que preencheu devidamente, clique em “Próxima etapa”</p><p><strong>#2:</strong> Agora vamos configurar o servidor SMTP. Mesmo que você nem faça ideia do que SMTP é.</p><figure><img src="https://cdn-images-1.medium.com/max/525/1*fG4_btgiXS3kqnMd6sOuBw.png" alt=""><figcaption>Se o cuidado já tinha que ser grande antes, agora triplique-o.</figcaption></figure><p>A primeira coisa a se verificar é se o seu domínio está aparecendo no <em>pop-up</em>, na parte destacada em verde do _screenshot _acima. Se está, ótimo. Se não, volte uma casa e configure a primeira tela novamente.</p><p>A segunda coisa a se fazer é <strong>apagar </strong>todo o conteúdo das caixas de texto, e preenche-las da seguinte forma:</p><ul><li>Servidor de SMTP: <strong>smtp.gmail.com</strong> (_exatamente _dessa forma)</li><li>Nome de usuário: <strong><em>meugmail@gmail.com</em></strong> (NÃO é o seu e-mail de redirecionamento, é seu Gmail. No meu caso, seria joselitojunior@gmail.com)</li><li>Senha: usaremos a <strong>senha gerada </strong>na parte 1 desse tutorial.</li></ul><p>Se tá tudo configurado com carinho, clique em “<strong>Adicionar conta</strong>”.</p><p>É possível que tenha dado ruim agora. Há dois erros mais prováveis:</p><ul><li>Se deu erro de <strong>DNS</strong>, verifique se você trocou o endereço do SMTP</li><li>Se deu erro de <strong>autenticação</strong>, a senha gerada está errada. Repita o processo da parte 1.</li></ul><p>Se tá tudo muito bom, tudo muito bem, você deve ter sido redirecionado para outra tela. Vem, jovem.</p><h4 id="Parte-3-Honras-e-glorias"><a href="#Parte-3-Honras-e-glorias" class="headerlink" title="Parte 3: Honras e glórias"></a>Parte 3: Honras e glórias</h4><p>Se você foi redirecionado para a tela “ <strong>Verifique a confirmação e adicione seu endereço de e-mail”</strong> então é só correr pro abraço. Ou quase.</p><figure><img src="https://cdn-images-1.medium.com/max/695/1*ZponW4sEgnhMQmuNWtGvMQ.png" alt=""></figure><p>Pra não dizer que não precisa fazer mais nada, a única coisa que resta a fazer é clicar num link de confirmação que o Gmail mandou para a sua própria caixa de entrada (afinal, no Passo 0, configuramos o redirecionamento). A partir desse momento o seu e-mail irá aparecer <strong>Contas e importação</strong>, e na hora de envio você vai poder definir de qual conta você pretende enviar seus e-mails.</p><figure><img src="https://cdn-images-1.medium.com/max/598/1*aTf1DZfg6h_1ZkE2tQ8RWw.png" alt=""><figcaption>É só clicar ali em “De”, meu jovem.</figcaption></figure><h4 id="Parte-4-Seja-feliz"><a href="#Parte-4-Seja-feliz" class="headerlink" title="Parte 4: Seja feliz"></a>Parte 4: Seja feliz</h4><p>Depois dessa <em>via-crúcis</em>, está tudo funcionando e pronto pra uso para <strong>envio e recebimento de e-mails grátis com seu domínio</strong>. (vem Google, vem.)</p><p>Aproveite seu novo e-mail grátis, e que não é do <a href="http://bol.com.br" target="_blank" rel="external">Bol</a>. O céu é o limite.</p><p><em>Agradecimentos ao</em><strong><em> TJ Kelly</em></strong><em>, semideus que </em><a href="http://www.tjkelly.com/blog/gmail-godaddy-email-forwarding/" target="_blank" rel="external"><em>desenvolveu a receita</em></a><em> desse processo maligno e pecaminoso de configuração.</em></p><p><img src="https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=1681f355d709" alt=""></p>]]></content:encoded>
      
      <comments>https://joseli.to/recebendo-e-enviando-e-mails-do-godaddy-via-gmail-%E2%80%94-de-graca/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Porquê o Firebase é o melhor lugar para seu Progressive Web App</title>
      <link>https://joseli.to/porque-o-firebase-e-o-melhor-lugar-para-seu-progressive-web-app/</link>
      <guid>https://joseli.to/porque-o-firebase-e-o-melhor-lugar-para-seu-progressive-web-app/</guid>
      <pubDate>Thu, 28 Jul 2016 05:34:22 GMT</pubDate>
      <description>
      
        &lt;figure&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/874/1*BjKeWBXINSb8f5bKx9csbg.png&quot; alt=&quot;&quot;&gt;&lt;/figure&gt;&lt;p&gt;No último Google I/O o Firebase f
      
      </description>
      
      <content:encoded><![CDATA[<figure><img src="https://cdn-images-1.medium.com/max/874/1*BjKeWBXINSb8f5bKx9csbg.png" alt=""></figure><p>No último Google I/O o Firebase ficou monstrão e virou A Plataforma pra aplicativos. Agora ele é um toolkit completo, que vai desde autenticação até analytics; tudo isso a estando disposição do desenvolvedor num ecosistema totalmente integrado com os produtos do Google.</p><p>Eu <a href="https://codigo.joselito.space/seus-sites-seguros-de-gra%C3%A7a-sem-custo-nenhum-e-n%C3%A3o-pagando-nada-49df4694bd85" target="_blank" rel="external">havia comentado anteriormente</a> que achava o finado Parse uma solução mais completa pra quem queria fazer um App. Porém, com esse update, o Firebase preencheu — e da melhor maneira possível — todas as lacunas que o Parse se destacava. O Firebase é muito, mais muito mais que um banco de dados que atualiza em tempo real.</p><p>E se <strong><em>Progressive Web Apps</em></strong> são sites que tomaram as vitaminas certas, há poucas vitaminas melhores que o Firebase para construirmos a base fundamental da nossa aplicação. Saiba quais os principais motivos disso:</p><h4 id="Hospedagem"><a href="#Hospedagem" class="headerlink" title="Hospedagem"></a>Hospedagem</h4><p>Apesar de não ser estritamente obrigatório, um bom PWA tende a ser um Single Page App. Com o <strong>Firebase Hosting</strong> você pode dar <em>deploy</em> nos arquivos estáticos do seu PWA com apenas uma linha de comando, usando o <strong>Firebase-CLI</strong>. Tudo é enviado para os servidores do Google e entregue via <strong>CDNs</strong> ao redor do mundo, o que garante que o usuário da sua aplicação vai carregar seu app o mais rápido possível.</p><p>Além disso, ele oferece um controle de versão diferenciado pra cada deploy. Ou seja, se alguém (você) fez alguma merda, até o CTO que não coda nunca consegue voltar pra última versão dando dois cliques lá no painel do Firebase.</p><h4 id="Rotas"><a href="#Rotas" class="headerlink" title="Rotas"></a>Rotas</h4><p>Se você já fez um SPA, sabe o quão importante é fazer o roteamento devido das páginas. Entretanto, muita gente esquece de que isso é importante de ser feito não só no front-end do seu App, mas no seu servidor também.</p><p>Para melhorar a experiência do usuário, uma excelente — e ao meu ver, obrigatória — prática é <strong>mudar a URL</strong> da sua aplicação a cada vez que a sua <strong>View</strong> é alterada. E pra isso ficar bem feito, dando a possibilidade de você usar a <strong>History API</strong> do Browser (e remover aquele /#/ infame das URLs), o Firebase permite que você, de maneira simples, redirecione todo o acesso de URL no seu site para a <strong>index.html</strong>.</p><p>Sendo assim, um acesso de <a href="http://meusite.xyz/produtos" target="_blank" rel="external"><strong>http://meusite.xyz/produtos</strong></a> seria redirecionado diretamente para o seu SPA, com /produtos como <strong>parâmetro</strong>. Usando um bom framework como o <strong>Angular</strong> ou uma lib como o <strong>React + React Router</strong> você tá feito.</p><p>Fúnciona até com <strong>Ember</strong>, <a href="https://medium.com/@aleattorium/ningu%C3%A9m-usa-ember-js-59e850dc05a1#.ectb1f2pz" target="_blank" rel="external">aquele framework que ninguém usa</a>.</p><h4 id="HTTPS-SSL-gratis-com-seu-proprio-dominio"><a href="#HTTPS-SSL-gratis-com-seu-proprio-dominio" class="headerlink" title="HTTPS/SSL grátis com seu próprio domínio"></a>HTTPS/SSL grátis com seu próprio domínio</h4><p>SIM. HTTPS tá mais mainstream do que nunca e isso é ótimo.</p><p>O Firebase já oferecia HTTPS na faixa pra quem usava o subdomínio padrão, o <strong><em>firebaseapp.com</em></strong>. Porém eles agora têm a ousadia de comprar e configurar o certificado SSL pra você, sem qualquer custo.</p><p>E dado que é um certificado direto, diferente do SSL gratuito que a <strong>CloudFlare</strong> oferece, é sem sombra de dúvida a <strong>melhor solução</strong> pra ter um HTTPs gratuitamente, com o mínimo de esforço.</p><h4 id="Push-Notifications-Auth-e-otras-cositas-mas"><a href="#Push-Notifications-Auth-e-otras-cositas-mas" class="headerlink" title="Push Notifications, Auth e otras cositas mas"></a>Push Notifications, Auth e otras cositas mas</h4><p>Como mencionei no início do texto, o Firebase agora é um toolkit robusto e completo. O <strong>Firebase Cloud Messaging</strong>, por exemplo, é uma versão evoluida do Google Cloud Messaging, totalmente projetada pra aplicativos e sites. Ela é especialmente útil para o envio de <strong>Push Notifications</strong> segmentados, fomentado o <strong>engajamento</strong> dos usuários, que é um dos princípios de um Progressive Web App.</p><p>Além disso, temos serviços como de <strong>Autenticação</strong> integrado diretamente com o banco do Firebase (totalmente compatível com <strong>OAuth</strong>, dá pra logar até com conta Microsoft); <strong>Analytics</strong> projetado para Apps; Integração com o Google <strong>Adwords</strong>; e os incríveis <a href="https://firebase.google.com/docs/dynamic-links/?hl=pt-br" target="_blank" rel="external"><strong>Dynamic Links</strong></a> e o <a href="https://firebase.google.com/docs/invites/?hl=pt-br" target="_blank" rel="external"><strong>Firebase Invites</strong></a>, que merecem seus próprios posts.</p><p>Aguardem e confiem.</p><h4 id="Use-o-Firebase-agora-meu-jovem"><a href="#Use-o-Firebase-agora-meu-jovem" class="headerlink" title="Use o Firebase agora, meu jovem"></a>Use o Firebase agora, meu jovem</h4><p>Você agora já sabe porquê o Firebase é o melhor lugar para seu appzinho morar. Ele vai ter uns <a href="https://firebase.google.com/customers/" target="_blank" rel="external">vizinhos incríveis</a>. Tá esperando o quê pra começar a usar? Entra em <a href="http://firebase.google.com" target="_blank" rel="external"><strong>http://firebase.google.com</strong></a>. Nem vai precisar de cadastro por que você que tá lendo tem Conta Google que eu sei.</p><p><em>You got the fire, let it </em><a href="https://www.youtube.com/watch?v=CGyEd0aKWZE" target="_blank" rel="external"><em>burn</em></a><em>.</em></p>]]></content:encoded>
      
      <comments>https://joseli.to/porque-o-firebase-e-o-melhor-lugar-para-seu-progressive-web-app/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Sobre o Allo, sugestões e o que nos faz humanos</title>
      <link>https://joseli.to/sobre-o-allo-sugestoes-e-o-que-nos-faz-humanos/</link>
      <guid>https://joseli.to/sobre-o-allo-sugestoes-e-o-que-nos-faz-humanos/</guid>
      <pubDate>Thu, 09 Jun 2016 13:58:19 GMT</pubDate>
      <description>
      
        &lt;figure&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/1024/1*aCbnpQbIIg6rCsJwAj3V3w.jpeg&quot; alt=&quot;&quot;&gt;&lt;figcaption&gt;Allo allo marciano, aqui quem f
      
      </description>
      
      <content:encoded><![CDATA[<figure><img src="https://cdn-images-1.medium.com/max/1024/1*aCbnpQbIIg6rCsJwAj3V3w.jpeg" alt=""><figcaption>Allo allo marciano, aqui quem fala é da terra. Sim, continuamos em guerra.</figcaption></figure><p>Viver no futuro nos dá certas vantagens.</p><p>Toda segunda-feira o Spotify sugere uma playlist única pra mim. Músicas que eu provavelmente irei gostar. O Facebook, que literalmente sabe o que eu gosto, faz uma curadoria no News Feed pra mostrar coisas que eu gostaria de ver. Inclusive os anúncios. E por falar de anúncios, como não lembrar da Amazon, profunda conhecedora daquilo que você leu, viu, comprou — ou até só _pensou _em comprar — e usa isso pra te dar as melhores recomendações de compras.</p><p>Detre essas, uma das mais recentes é o <strong>Smart Reply</strong> do Inbox by Gmail. A ideia é maravilhosa: o Gmail lê seu e-mail — pasme, o Google sabe de tudo — e sugere três possíveis respostas pra situação. Claro, isso não funciona com todo e qualquer e-mail, mas naqueles clássicos de “vamo marcar” funciona, e muito bem. Os Smart Replies podem te poupar um tempo danado, pra fazer outras coisas como, por exemplo, reclamar que não tem tempo o suficiente pra fazer as coisas.</p><p>No último Google I/O foram apresentados diversos novos produtos, os quais eu não comentei apenas <a href="http://soyjo.xyz/1VLF8KR" target="_blank" rel="external">em um podcast</a>, mas <a href="http://soyjo.xyz/28jpCed" target="_blank" rel="external">em dois</a>. No pequeno universo desse texto, apenas dois importam: o <strong>Allo </strong>e o <strong>Google Assistant</strong>.</p><p>O Assistant é a versão do Google encarnada numa inteligencia artificial. Finalmente temos o nosso Multivac. Ou ao menos uma versão não humana do Visão, menos apaixonado pela Feiticeira Escarlate. A parte mais interessante é que aparentemente, a primeira casa do Assistant não será no lugar do Google Now, nem mesmo o Google Home. <a href="https://youtu.be/862r3XS2YB0?t=1837" target="_blank" rel="external">Será no Allo</a>; e será uma versão exponencialmente on _steroids _dos <strong>Smart Replies</strong>.</p><p>É agora que as coisas começam a ficar interessantes. E talvez perigosas.</p><p>As Smart Replies do Allo chegam a ser obscenas. Juntando toda a AI do Google, entendem contexto, fotos, informações, detalhes pessoais e cruzam isso de uma maneira nunca antes vista, sugerindo a você mesmo o que você mesmo iria responder.</p><p>E é aí o ponto que me faz questionar: <strong>usando os Smart Replies nas conversas, o quanto é que você mesmo está respondendo e o quanto o Assistant está respondendo por você?</strong></p><p>Me permita ser claro: respondendo por você não como assistente, mas como outrem que está <strong>pensando </strong>e <strong>escolhendo </strong>por você, <strong>no seu lugar</strong>. Eu sei, também soou absurdo a primeira vez que pensei sobre isso.</p><p>Vamos voltar por um instante ao nosso conhecido sistema de sugestões: todos tem como finalidade manter você na plataforma lhe entregando coisas que você muito provavelmente <strong>gosta</strong>. E isso funciona bem por que vende — não pense que o Facebook caga o News Feed e o Instagram a cada 15 dias é por puro chute. Eles sabem o que funciona por que os dados falam mais sobre você do que algo que saia da sua boca. E se não desse retorno ($) a primeira coisa que eles fariam era mudar — entretanto, esse mesmo algoritmo coloca cada um de nós numa amigável e terrível <strong>bolha de conforto</strong>.</p><p>E o reflexo das redes te entregarem conteúdo que sempre te interessa, a um nível pessoal, isso te impede cada vez mais de conhecer e pensar em novas ideias que possam mudar a visão que temos do mundo. Ou da que somos, como humanos. E isso não basta, já que a própria mecânica já modifica a maneira a qual interagimos: às vezes não nos permitimos a determinadas situações para não sair do conforto da bolha. Temos sede de likes, e — mais do que a recompensa de receber vários — nos frustramos ao NÃO receber as curtidas. Picotamos os melhores momentos da vida só pra compartilhar com a própria bolha (e ainda aplicamos filtro), momentos que ás vezes nem foram tão legais na vida real. <em>Mas quem se importa? Colocando esse Lo-Fi vai render milhares de coraçãozinéos.</em></p><p>Agora imagina isso tudo acontecendo no meio de uma conversação.</p><figure><img src="https://cdn-images-1.medium.com/max/1024/1*2hD4jJdNLhb-cH_IjV44ew.jpeg" alt=""><figcaption>Ok, Google. Como reverter a entropia?</figcaption></figure><p>Na apresentação do Allo, o Google Assistant ao reconhecer uma imagem de um cachorro, sugere responder que ele é “fofo”, bem como ao ver a imagem do prato de massa sugere “gostoso” como uma das opções.</p><p>Apesar de a uma primeira vista ser um exemplo inocente — afinal, qualquer pessoa que não ache filhotes de cachorro fofos tem que ser tratada com urgência — as respostas sugeridas serem todas <strong>afirmativas </strong>não é por coincidência. É porquê funciona. Te mantém confortável na própria bolha. E trazer essa bolha pra nossa interação mais básica e direta, <em>uma conversa</em>, pode criar uma influência muito maior naquilo que falamos e pensamos, de forma muito mais intensa do que as redes sociais já fazem.</p><p>E quando acontecer de você ver um prato que não parece que ficou tão bom assim? Ou um vídeo no YouTube que não foi tão legal? Ou até mesmo o absurdo de um cachorro que não seja tão fofo? Quantas vezes será que é o necessário pra começarmos a sentir que, talvez, devemos responder aquilo que a AI está sugerindo, afinal é aquilo que <em>parece certo</em>.</p><p>Quantas vezes até uma sugestão direta fazer você mudar de opinião?</p><p>Se a um primeiro momento os Smart Replies soam como um ganho de tempo maravilhoso, por outro lado, ao tentar decidir por você quais deveriam ser suas respostas, tira um pouquinho de nossa identidade e deixa robôs falarem por nós. Há conversação, mas e comunicação?</p><p>Sempre achei que as AI iam dominar o mundo na marra. Mas não precisam gastar uma bala contra a gente.</p><p>É só fazer a gente deixar de ser.</p><figure><img src="https://cdn-images-1.medium.com/max/780/1*CgtcvLyRVs2V7DRocHCKvw.jpeg" alt=""></figure><p><img src="https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=15a28cd634c5" alt=""></p>]]></content:encoded>
      
      <comments>https://joseli.to/sobre-o-allo-sugestoes-e-o-que-nos-faz-humanos/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Google Valley Music and Arts Festival</title>
      <link>https://joseli.to/google-valley-music-and-arts-festival/</link>
      <guid>https://joseli.to/google-valley-music-and-arts-festival/</guid>
      <pubDate>Fri, 03 Jun 2016 16:22:19 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;&lt;p&gt;♪♬ Clap along if you feel like a developer out of place… ♩♫&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Google I/O, mas pode chamar de Coachella. Todo
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>♪♬ Clap along if you feel like a developer out of place… ♩♫</p></blockquote><p>Google I/O, mas pode chamar de Coachella. Todo ano quando chegamos em Maio, sabemos que em breve irá acontecer o evento mais importante e relevante do ano pra Google (é Alphabet ou não, afinal?). Nesse episódio vamos passar por um calor inesperado, shows musicais, festas da firma e produtos que não estavam prontos. E isso sem ganhar brinde, hein!</p><p>Além disso esse episódio é experimental: mais curto e dinâmico. Se ficou bom (ou ruim!) avisa e a gente vai se ajeitando. Sempre em busca de produzir o melhor conteúdo pra nossa clientela.</p><p>Nesse episódio eu dou uma visão pessoal sobre o evento como um todo. Se você quer me ouvir falando sobre os <strong>produtos </strong>e conteúdos específicos do Google I/O, numa pegada mais técnica, escuta o <a href="http://devcommunitycast.com.br/" target="_blank" rel="external"><strong>Dev &amp; Community Cast</strong></a> que eu gravei com o <a href="https://medium.com/u/d922ae366d11" target="_blank" rel="external">Neto Marin</a> e o <a href="https://medium.com/u/16a3328b88c3" target="_blank" rel="external">Bruno Scrok Brunoro</a>.</p><blockquote><p><strong>No momento da publicação desse CT, o episódio do Dev &amp; Community Cast ainda não tinha sido publicado. O post será atualizado quando ele sair (:</strong></p></blockquote><p>E de bônus — como se não fosse sofrimento o suficiente ouvir minha voz — você pode ver um vídeo que gravei junto com uns brothers da comunidade pro <a href="https://www.youtube.com/channel/UCVAwnfMBdeA7Zz2fQf8fo_w" target="_blank" rel="external">MasterTech</a>:</p><blockquote><p>O MasterTech fez um vídeo com as meninas acharam do Google I/O também: <a href="https://www.youtube.com/watch?v=uT09WPUCfqQ" target="_blank" rel="external"><strong>https://www.youtube.com/watch?v=uT09WPUCfqQ</strong></a></p></blockquote><p>####</p><p>Se você é inscrito no nosso Feed, nós já mandamos o episódio pra você. Se você usa algum desses apps de podcast, melhor ainda! Dá aquele famoso refresh que o episódio vai estar lá fresquinho.</p><h4 id="Comentado-no-Episodio"><a href="#Comentado-no-Episodio" class="headerlink" title="Comentado no Episódio"></a>Comentado no Episódio</h4><ul><li><a href="https://www.youtube.com/playlist?list=PLOU2XLYxmsILe6_eGvDN3GyiodoV3qNSC" target="_blank" rel="external">Playlist com TODOS os conteúdos do Google I/O no YouTube</a></li></ul><h4 id="Redes-Sociais"><a href="#Redes-Sociais" class="headerlink" title="Redes Sociais"></a>Redes Sociais</h4><ul><li>Dá aquele like na nossa FAN-PAGE do <a href="http://fb.com/codetalks" target="_blank" rel="external">Facebook</a></li><li><a href="http://twitter.com/code_talks" target="_blank" rel="external">Twitter</a> da massa pra receber tudo em primeira mão (dizem)</li><li><strong>NOVIDADE:</strong> temos um bot no Messenger, pra você receber as atualizações do CT direto pelo chat. É só acesssar: <a href="http://m.me/codetalks" target="_blank" rel="external">http://m.me/codetalks</a> e se inscrever. em sugestão do que a gente pode por nesse bot? Conta pra gente!</li></ul>]]></content:encoded>
      
      <comments>https://joseli.to/google-valley-music-and-arts-festival/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
